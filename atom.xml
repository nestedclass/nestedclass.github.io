<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>前端学习</title>
  
  <subtitle>前端修行之路-无与为乐者</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://www.inlm.cn/"/>
  <updated>2018-10-31T16:43:48.054Z</updated>
  <id>http://www.inlm.cn/</id>
  
  <author>
    <name>Wang Li</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>html适配</title>
    <link href="http://www.inlm.cn/2018/10/31/html%E9%80%82%E9%85%8D/"/>
    <id>http://www.inlm.cn/2018/10/31/html适配/</id>
    <published>2018-10-31T15:27:27.000Z</published>
    <updated>2018-10-31T16:43:48.054Z</updated>
    
    <content type="html"><![CDATA[<h4 id="适配解决方案"><a href="#适配解决方案" class="headerlink" title="适配解决方案"></a>适配解决方案</h4><p>描述:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt; meta name = &quot;viewport&quot;</span><br><span class="line">content = &quot;width=device-width,initial-scale=1,minimum-scale=1,</span><br><span class="line">maximum-scale=1,user-scalable=no&quot; / &gt;</span><br></pre></td></tr></table></figure></p><p>说明:<br>(1)移动适配,对页面加此标签,此标签能够不按照默认加载<br>(2)必要内容<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">width=device-width 设置页面视口大小和设备尺寸相同大小</span><br><span class="line">user-scalable=no 设置用户不可对页面进行大小缩放设置</span><br><span class="line">initial-scale=1 设置页面加载倍率为1倍</span><br></pre></td></tr></table></figure></p><p>(3) 可选内容<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">minimum-scale=1 设置页面最小缩小倍率1.0</span><br><span class="line">maximum-scale=1 设置页面最大放大倍率1.0</span><br></pre></td></tr></table></figure></p><p>补充<br>这个标签在页面中并不是所有移动端都能生效,,几乎所有的移动端都不生效<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">document.querySelector(&apos;div&apos;).onclick = function() &#123;</span><br><span class="line">console.log(document.documentElement.clientWidth);//视口宽度</span><br><span class="line">console.log(document.documentElement.clientHeight);//视口高度</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="rem单位"><a href="#rem单位" class="headerlink" title="rem单位"></a>rem单位</h4><p>1、rem是字体的多少倍<br>语法:<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">document.documentElement.style.fontSize=(</span><br><span class="line">document.documentElement.clientWidth/750)*100+&quot;px&quot;;</span><br></pre></td></tr></table></figure></p><p>那么在750px大小设备当中1rem=100px;<br>在375px大小的设备中 1rem=50px;<br>2、为什么标准单位按照750px计算？<br>UI设计稿标准是750px来设计的</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;适配解决方案&quot;&gt;&lt;a href=&quot;#适配解决方案&quot; class=&quot;headerlink&quot; title=&quot;适配解决方案&quot;&gt;&lt;/a&gt;适配解决方案&lt;/h4&gt;&lt;p&gt;描述:&lt;br&gt;&lt;figure class=&quot;hljs highlight plain&quot;&gt;&lt;table&gt;&lt;tr
      
    
    </summary>
    
    
      <category term="移动端适配" scheme="http://www.inlm.cn/tags/%E7%A7%BB%E5%8A%A8%E7%AB%AF%E9%80%82%E9%85%8D/"/>
    
  </entry>
  
  <entry>
    <title>Js学习课程</title>
    <link href="http://www.inlm.cn/2018/10/11/Js%E5%AD%A6%E4%B9%A0%E8%AF%BE%E7%A8%8B/"/>
    <id>http://www.inlm.cn/2018/10/11/Js学习课程/</id>
    <published>2018-10-11T14:47:32.000Z</published>
    <updated>2018-10-11T15:22:31.332Z</updated>
    
    <content type="html"><![CDATA[<h3 id="值类型"><a href="#值类型" class="headerlink" title="值类型"></a>值类型</h3><p><code>var a = 100</code><br><code>var b = a</code><br><code>a = 300</code><br><code>console.log(b)</code></p><h3 id="引用类型"><a href="#引用类型" class="headerlink" title="引用类型"></a>引用类型</h3><p><code>var a1 = {age: 20}</code><br><code>var b1 = a1</code><br><code>b1.age = 21</code><br><code>console.log(a1.age)</code></p><h3 id="何时使用”-”何时使用”-”"><a href="#何时使用”-”何时使用”-”" class="headerlink" title="何时使用”==”何时使用”===”"></a>何时使用”==”何时使用”===”</h3><p><strong>==</strong>对象值是否存在，函数参数是否存在<br><code>if (a1.age == null) { //a1.age===null||a1.age===undefined,简写形式    }</code></p><h3 id="js中内置函数—数据封装类对象"><a href="#js中内置函数—数据封装类对象" class="headerlink" title="js中内置函数—数据封装类对象"></a>js中内置函数—数据封装类对象</h3><ol><li>Object  对象</li><li>Array   数组</li><li>Boolean  布尔</li><li>Number   数值</li><li>String   字符串</li><li>Function  函数</li><li>Date      时间</li><li>RegExp    正则</li><li>Error     错误</li></ol><h3 id="Js变量按照存储方式区分为那些类型，其特点"><a href="#Js变量按照存储方式区分为那些类型，其特点" class="headerlink" title="Js变量按照存储方式区分为那些类型，其特点"></a>Js变量按照存储方式区分为那些类型，其特点</h3><p>值类型<br><code>var a = 100</code><br><code>var b = a</code><br><code>a = 300</code><br><code>console.log(b)</code> //100<br>引用类型<br><code>var a1 = {age: 20}</code><br><code>var b1 = a1</code><br><code>b1.age = 21</code><br><code>console.log(a1.age)</code> //21</p><h3 id="理解JSON"><a href="#理解JSON" class="headerlink" title="理解JSON"></a>理解JSON</h3><p>JSON 只不过是一个JS对象,数据格式<br>JSON 常用API</p><blockquote><p>JSON.stringify({a:10,b:20})</p></blockquote><blockquote><p>JSON.parse(‘{“a”:10,”b”:20}’)</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;值类型&quot;&gt;&lt;a href=&quot;#值类型&quot; class=&quot;headerlink&quot; title=&quot;值类型&quot;&gt;&lt;/a&gt;值类型&lt;/h3&gt;&lt;p&gt;&lt;code&gt;var a = 100&lt;/code&gt;&lt;br&gt;&lt;code&gt;var b = a&lt;/code&gt;&lt;br&gt;&lt;code&gt;a = 30
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 继承</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E7%BB%A7%E6%89%BF/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-继承/</id>
    <published>2018-10-10T17:15:05.000Z</published>
    <updated>2018-10-10T17:15:45.499Z</updated>
    
    <content type="html"><![CDATA[<p></p><p>1、传统形式—&gt;原型链<br>缺点：过多的继承没用的属性</p><p></p><pre><code class="lang-javascript">    Grand.prototype.latsName = &#39;Wang&#39;;    function Grand() {    }    var grand = new Grand();    Father.prototype = grand;    function Father() {        this.name = &quot;Cyy&quot;;    }    var father = new Father();    Son.prototype = father;    function Son() {        this.hobbit = &#39;smoke&#39;;    }    var son = new Son();</code></pre><p>2、借用构造函数<br>缺点：1.不能继承借用构造函数的原型2.每次构造函数都要多走一个函数</p><pre><code class="lang-javascript">    function Person(name, age, sex) {        this.name = name;        this.age = age;        this.sex = sex;    }    function Student(name, age, sex, tel, grade) {        Person.call(this,name, age, sex);        this.tel = tel;        this.grade = grade;    }    var person = new Student(&#39;wang&#39;, 18, &#39;male&#39;, 139, 2018);</code></pre><p>3、共享原型<br>缺点：不能随便改动自己的原型</p><pre><code class="lang-javascript">    Father.prototype.lastName = &#39;Wang&#39;;    function Father() {    }    function Son() {    }    function inherit(Target, Origin) {        Target.prototype = Origin.prototype;    }    // Son.prototype = Father.prototype;    inherit(Son, Father)    var son = new Son();</code></pre><p>4、圣杯模式</p><pre><code class="lang-javascript">    Father.prototype.lastName = &#39;Wang&#39;;    function Father() {    }    function Son() {    }    function inherit(Target, Origin) {        Target.prototype = Origin.prototype;        function F() {            F.prototype = Father.prototype;            Target.prototype = new F()            Target.prototype.constructor = Target;            Target.prototype.uber = Origin.prototype;        }    }    inherit(Son, Father)    var son = new Son();    var father = new Father();</code></pre>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;/p&gt;&lt;p&gt;1、传统形式—&amp;gt;原型链&lt;br&gt;缺点：过多的继承没用的属性&lt;/p&gt;&lt;p&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code class=&quot;lang-javascript&quot;&gt;    Grand.prototype.latsName = &amp;#39;Wang&amp;#39;;
    f
      
    
    </summary>
    
    
      <category term="javascript继承" scheme="http://www.inlm.cn/tags/javascript%E7%BB%A7%E6%89%BF/"/>
    
  </entry>
  
  <entry>
    <title>javascript Call/Apply</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-Call-Apply/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-Call-Apply/</id>
    <published>2018-10-10T17:11:33.000Z</published>
    <updated>2018-10-10T17:12:17.892Z</updated>
    
    <content type="html"><![CDATA[<p><strong>call/apply</strong><br>1.作用，改变this指向。<br>2.区别，后面传的参数形式不同。<br>3.call需要把实参按照形参的个数传进去<br>4.apply需要传一个arguments</p><h4 id="call"><a href="#call" class="headerlink" title="call"></a>call</h4><p>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(<span class="string">'wang'</span>, <span class="number">18</span>);</span><br><span class="line"><span class="keyword">var</span> obj = &#123;&#125;</span><br><span class="line">Person.call(obj,<span class="string">'CYY'</span>,<span class="number">200</span>);</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class="line">    Person.call(<span class="keyword">this</span>,name, age, sex);</span><br><span class="line">    <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Student(<span class="string">'wang'</span>, <span class="number">18</span>, <span class="string">'male'</span>, <span class="number">139</span>, <span class="number">2018</span>);</span><br></pre></td></tr></table></figure><h4 id="apply"><a href="#apply" class="headerlink" title="apply"></a>apply</h4><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, age, sex</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.age = age;</span><br><span class="line">    <span class="keyword">this</span>.sex = sex;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Student</span>(<span class="params">name, age, sex, tel, grade</span>) </span>&#123;</span><br><span class="line">    Person.apply(<span class="keyword">this</span>,[name, age, sex]);</span><br><span class="line">    <span class="keyword">this</span>.tel = tel;</span><br><span class="line">    <span class="keyword">this</span>.grade = grade;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Student(<span class="string">'wang'</span>, <span class="number">18</span>, <span class="string">'male'</span>, <span class="number">139</span>, <span class="number">2018</span>);</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;call/apply&lt;/strong&gt;&lt;br&gt;1.作用，改变this指向。&lt;br&gt;2.区别，后面传的参数形式不同。&lt;br&gt;3.call需要把实参按照形参的个数传进去&lt;br&gt;4.apply需要传一个arguments&lt;/p&gt;
&lt;h4 id=&quot;call&quot;&gt;&lt;a 
      
    
    </summary>
    
    
      <category term="Call/Apply" scheme="http://www.inlm.cn/tags/Call-Apply/"/>
    
  </entry>
  
  <entry>
    <title>javascript 原型、原型链</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-原型、原型链/</id>
    <published>2018-10-10T17:09:35.000Z</published>
    <updated>2018-10-28T10:29:43.664Z</updated>
    
    <content type="html"><![CDATA[<p>1、定义原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。<br>2、利用原型特点和概念，可以提取共有属性。<br>3、对象如何查看原型 –&gt;隐式属性<code>__proto__</code>。<br>4、对象如何查看对象的构造函数–&gt;<code>constructor</code><br><strong>原型例子:</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line">  Person.prototype.name = <span class="string">"abc"</span>;</span><br><span class="line">  Person.prototype.Lastname = <span class="string">"deng"</span>;</span><br><span class="line">  Person.prototype.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="built_in">console</span>.log(<span class="string">'hehe'</span>);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">      <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">          <span class="built_in">console</span>.log(<span class="string">'aaa'</span>)</span><br><span class="line">      &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br><span class="line">  <span class="keyword">var</span> person1 = <span class="keyword">new</span> Person();</span><br><span class="line">  Car.prototype = &#123;</span><br><span class="line">      carname: <span class="string">'BMW'</span>,</span><br><span class="line">      height: <span class="number">120</span>,</span><br><span class="line">      lang: <span class="number">5000</span>,</span><br><span class="line">      <span class="keyword">constructor</span>: Person //构造器指向</span><br><span class="line">&#125;</span><br><span class="line">Person.prototype = &#123;</span><br><span class="line">carname: <span class="string">'BC'</span>,</span><br><span class="line">      height: <span class="number">1400</span>,</span><br><span class="line">      lang: <span class="number">4900</span>,</span><br><span class="line">      <span class="keyword">constructor</span>: Car //构造器指向</span><br><span class="line">&#125;</span><br><span class="line">function Car() &#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person(); <span class="keyword">var</span></span><br><span class="line">      car = <span class="keyword">new</span> Car();</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure></p><p><strong>原型链</strong><br>1、如何构成原型链？<br>    原型链例子: 原型链原型<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">Grand.prototype.latsName = <span class="string">'Wang'</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Grand</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> grand = <span class="keyword">new</span> Grand();</span><br><span class="line">Father.prototype = grand;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Father</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">"Cyy"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> father = <span class="keyword">new</span> Father();</span><br><span class="line">Son.prototype = father;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Son</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.hobbit = <span class="string">'smoke'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> son = <span class="keyword">new</span> Son();</span><br></pre></td></tr></table></figure></p><p>2、原型链上的属性增删改查<br>3、绝大多数对象的最终都会继承自Object.prototype<br>    // sayName的this指向,谁调用this指向谁<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">Person.prototype = &#123;</span><br><span class="line">    name: <span class="string">'a'</span>,</span><br><span class="line">    sayName: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="keyword">this</span>.name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = <span class="string">'b'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> person = <span class="keyword">new</span> Person();</span><br></pre></td></tr></table></figure></p><p>4、Object.create(原型)；<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">   <span class="keyword">var</span> obj = <span class="built_in">Object</span>.create(原型);</span><br><span class="line"><span class="keyword">var</span> obj=&#123;<span class="attr">name</span>:<span class="string">'Wang'</span>,<span class="attr">age</span>:<span class="number">18</span>&#125;;</span><br><span class="line"><span class="keyword">var</span> obj1=<span class="built_in">Object</span>.create(obj);</span><br></pre></td></tr></table></figure></p><h3 id="原型规则和示例"><a href="#原型规则和示例" class="headerlink" title="原型规则和示例"></a>原型规则和示例</h3><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var obj=&#123;&#125;;obj.a=100;</span><br><span class="line">var arr=[];arr.a=100;</span><br><span class="line">function fn()&#123;&#125;</span><br><span class="line">fn.a=100;</span><br></pre></td></tr></table></figure><p>隐身原型<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(obj.__proto__);</span><br><span class="line">console.log(arr.__proto__);</span><br><span class="line">console.log(fn.__proto__);</span><br></pre></td></tr></table></figure></p><p>显示原型<br><figure class="hljs highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">console.log(fn.prototype)</span><br><span class="line"></span><br><span class="line">console.log(obj.__proto__ === Object.prototype)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1、定义原型是function对象的一个属性，它定义了构造函数制造出的对象的公共祖先。通过该构造函数产生的对象，可以继承该原型的属性和方法。&lt;br&gt;2、利用原型特点和概念，可以提取共有属性。&lt;br&gt;3、对象如何查看原型 –&amp;gt;隐式属性&lt;code&gt;__proto__&lt;/c
      
    
    </summary>
    
    
      <category term="原型、原型链" scheme="http://www.inlm.cn/tags/%E5%8E%9F%E5%9E%8B%E3%80%81%E5%8E%9F%E5%9E%8B%E9%93%BE/"/>
    
  </entry>
  
  <entry>
    <title>javascript 预编译执行</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E9%A2%84%E7%BC%96%E8%AF%91%E6%89%A7%E8%A1%8C/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-预编译执行/</id>
    <published>2018-10-10T17:07:58.000Z</published>
    <updated>2018-10-10T17:08:12.122Z</updated>
    
    <content type="html"><![CDATA[<p>预编译(函数执行前)※</p><ol><li>创建AO对象（Active Object）</li><li>查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined </li><li>实参形参相统一，实参值赋给形参</li><li>查找函数声明，函数名作为AO对象的属性，值为函数引用</li></ol><p>预编译(脚本代码块script执行前)</p><ol><li>查找全局变量声明（包括隐式全局变量声明，省略var声明），变量名作全局对象的属性，值为undefined</li><li>查找函数声明，函数名作为全局对象的属性，值为函数引用</li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;预编译(函数执行前)※&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建AO对象（Active Object）&lt;/li&gt;
&lt;li&gt;查找函数形参及函数内变量声明，形参名及变量名作为AO对象的属性，值为undefined &lt;/li&gt;
&lt;li&gt;实参形参相统一，实参值赋给形参&lt;/li&gt;
&lt;li&gt;查找
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>javascript 基础知识</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-基础知识/</id>
    <published>2018-10-10T17:06:05.000Z</published>
    <updated>2018-10-10T17:06:54.301Z</updated>
    
    <content type="html"><![CDATA[<p>1 创建脚本块<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">JavaScript 代码写在这里面</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>2 隐藏脚本代码<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="built_in">document</span>.write(“Hello”);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>在不支持JavaScript的浏览器中将不执行相关代码<br>3 浏览器不支持的时候显示<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;noscript&gt;</span><br><span class="line">Hello to the non-JavaScript browser.</span><br><span class="line">&lt;<span class="regexp">/noscript&gt;</span></span><br></pre></td></tr></table></figure></p><p>4 链接外部脚本文件<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript” src=”/”filename.js””&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure></p><p>5 注释脚本<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// This is a comment</span></span><br><span class="line"><span class="built_in">document</span>.write(“Hello”); <span class="comment">// This is a comment</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">All of this</span></span><br><span class="line"><span class="comment">is a comment</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></p><p>6 输出到浏览器<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.write(“&lt;strong&gt;Hello&lt;<span class="regexp">/strong&gt;”);</span></span><br></pre></td></tr></table></figure></p><p>7 定义变量<br>引用内容程序代码<br><code>var myVariable = “some value”;</code><br>8 字符串相加<br>引用内容程序代码<br><code>var myString = “String1” + “String2”;</code><br>9 字符串搜索<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myVariable = “Hello there”;</span><br><span class="line"><span class="keyword">var</span> therePlace = myVariable.search(“there”);</span><br><span class="line"><span class="built_in">document</span>.write(therePlace);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>10 字符串替换<br>引用内容程序代码<br><code>thisVar.replace(“Monday”,”Friday”);</code><br>11 格式化字串<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myVariable = “Hello there”;</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.big() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.blink() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.bold() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.fixed() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.fontcolor(“red”) + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.fontsize(“<span class="number">18</span>pt”) + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.italics() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.small() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.strike() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.sub() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.sup() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.toLowerCase() + “&lt;br&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(myVariable.toUpperCase() + “&lt;br&gt;”);</span><br><span class="line"><span class="keyword">var</span> firstString = “My <span class="built_in">String</span>”;</span><br><span class="line"><span class="keyword">var</span> finalString = firstString.bold().toLowerCase().fontcolor(“red”);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>12 创建数组<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">myArray[<span class="number">0</span>] = “First Entry”;</span><br><span class="line">myArray[<span class="number">1</span>] = “Second Entry”;</span><br><span class="line">myArray[<span class="number">2</span>] = “Third Entry”;</span><br><span class="line">myArray[<span class="number">3</span>] = “Fourth Entry”;</span><br><span class="line">myArray[<span class="number">4</span>] = “Fifth Entry”;</span><br><span class="line"><span class="keyword">var</span> anotherArray = <span class="keyword">new</span> <span class="built_in">Array</span>(“First Entry”,”Second Entry”,”Third Entry”,”Fourth Entry”,”Fifth Entry”);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>13 数组排序<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">5</span>);</span><br><span class="line">myArray[<span class="number">0</span>] = “z”;</span><br><span class="line">myArray[<span class="number">1</span>] = “c”;</span><br><span class="line">myArray[<span class="number">2</span>] = “d”;</span><br><span class="line">myArray[<span class="number">3</span>] = “a”;</span><br><span class="line">myArray[<span class="number">4</span>] = “q”;</span><br><span class="line"><span class="built_in">document</span>.write(myArray.sort());</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>14 分割字符串<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myVariable = “a,b,c,d”;</span><br><span class="line"><span class="keyword">var</span> stringArray = myVariable.split(“,”);</span><br><span class="line"><span class="built_in">document</span>.write(stringArray[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">document</span>.write(stringArray[<span class="number">1</span>]);</span><br><span class="line"><span class="built_in">document</span>.write(stringArray[<span class="number">2</span>]);</span><br><span class="line"><span class="built_in">document</span>.write(stringArray[<span class="number">3</span>]);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>15 弹出警告信息<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="built_in">window</span>.alert(“Hello”);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>16 弹出确认框<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> result = <span class="built_in">window</span>.confirm(“Click OK to <span class="keyword">continue</span>”);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>17 自定义函数<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">multiple</span>(<span class="params">number1,number2</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> result = number1 * number2;</span><br><span class="line"><span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>18 调用JS函数<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”#”</span> <span class="attr">onClick</span>=<span class="string">”functionName()”</span>&gt;</span>Link text<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”/”javascript:functionName”()”</span>&gt;</span>Link text<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>19 在页面加载完成后执行函数<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onLoad</span>=<span class="string">”functionName();”</span>&gt;</span></span><br><span class="line">Body of the page</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>20 条件判断<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> userChoice = <span class="built_in">window</span>.confirm(“Choose OK or Cancel”);</span><br><span class="line"><span class="keyword">var</span> result = (userChoice == <span class="literal">true</span>) ? “OK” : “Cancel”;</span><br><span class="line"><span class="built_in">document</span>.write(result);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>21 指定次数循环<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="keyword">var</span> myArray = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">3</span>);</span><br><span class="line">myArray[<span class="number">0</span>] = “Item <span class="number">0</span>”;</span><br><span class="line">myArray[<span class="number">1</span>] = “Item <span class="number">1</span>”;</span><br><span class="line">myArray[<span class="number">2</span>] = “Item <span class="number">2</span>”;</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; myArray.length; i++) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(myArray[i] + “&lt;br&gt;”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>22 设定将来执行<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“Hello”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(“hello()”,<span class="number">5000</span>);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>23 定时执行函数<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“Hello”);</span><br><span class="line"><span class="built_in">window</span>.setTimeout(“hello()”,<span class="number">5000</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(“hello()”,<span class="number">5000</span>);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>24 取消定时执行<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“Hello”);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> myTimeout = <span class="built_in">window</span>.setTimeout(“hello()”,<span class="number">5000</span>);</span><br><span class="line"><span class="built_in">window</span>.clearTimeout(myTimeout);</span><br><span class="line"><span class="comment">// –&gt;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>25 在页面卸载时候执行函数<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onUnload</span>=<span class="string">”functionName();”</span>&gt;</span></span><br><span class="line">Body of the page</span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>JavaScript就这么回事2：浏览器输出<br>26 访问document对象<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> myURL = <span class="built_in">document</span>.URL;</span><br><span class="line"><span class="built_in">window</span>.alert(myURL);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>27 动态输出HTML<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">document</span>.write(“&lt;p&gt;Here’s some information about <span class="keyword">this</span> <span class="built_in">document</span>:<span class="xml"><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span>”);</span><br><span class="line"><span class="built_in">document</span>.write(“&lt;ul&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(“&lt;li&gt;Referring Document: “ + <span class="built_in">document</span>.referrer + “&lt;<span class="regexp">/li&gt;”);</span></span><br><span class="line"><span class="regexp">document.write(“&lt;li&gt;Domain: “ + document.domain + “&lt;/</span>li&gt;”);</span><br><span class="line"><span class="built_in">document</span>.write(“&lt;li&gt;URL: “ + <span class="built_in">document</span>.URL + “&lt;<span class="regexp">/li&gt;”);</span></span><br><span class="line"><span class="regexp">document.write(“&lt;/u</span>l&gt;”);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>28 输出换行<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.writeln(“&lt;strong&gt;a&lt;<span class="regexp">/strong&gt;”);</span></span><br><span class="line"><span class="regexp">document.writeln(“b”);</span></span><br></pre></td></tr></table></figure></p><p>29 输出日期<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> thisDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="built_in">document</span>.write(thisDate.toString());</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>30 指定日期的时区<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> myOffset = <span class="number">-2</span>;</span><br><span class="line"><span class="keyword">var</span> currentDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> userOffset = currentDate.getTimezoneOffset()/<span class="number">60</span>;</span><br><span class="line"><span class="keyword">var</span> timeZoneDifference = userOffset – myOffset;</span><br><span class="line">currentDate.setHours(currentDate.getHours() + timeZoneDifference);</span><br><span class="line"><span class="built_in">document</span>.write(“The time and date <span class="keyword">in</span> Central Europe is: “ + currentDate.toLocaleString());</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>31 设置日期输出格式<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> thisDate = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br><span class="line"><span class="keyword">var</span> thisTimeString = thisDate.getHours() + “:” + thisDate.getMinutes();</span><br><span class="line"><span class="keyword">var</span> thisDateString = thisDate.getFullYear() + “/” + thisDate.getMonth() + “/” + thisDate.getDate();</span><br><span class="line"><span class="built_in">document</span>.write(thisTimeString + “ on “ + thisDateString);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>32 读取URL参数<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> urlParts = <span class="built_in">document</span>.URL.split(“?”);</span><br><span class="line"><span class="keyword">var</span> parameterParts = urlParts[<span class="number">1</span>].split(“&amp;”);</span><br><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; parameterParts.length; i++) &#123;</span><br><span class="line"><span class="keyword">var</span> pairParts = parameterParts[i].split(“=”);</span><br><span class="line"><span class="keyword">var</span> pairName = pairParts[<span class="number">0</span>];</span><br><span class="line"><span class="keyword">var</span> pairValue = pairParts[<span class="number">1</span>];</span><br><span class="line"><span class="built_in">document</span>.write(pairName + “ ：“ +pairValue );</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>你还以为HTML是无状态的么？<br>33 打开一个新的document对象<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newDocument</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.open();</span><br><span class="line"><span class="built_in">document</span>.write(“&lt;p&gt;This is a New Document.&lt;<span class="regexp">/p&gt;”);</span></span><br><span class="line"><span class="regexp">document.close();</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>34 页面跳转<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.location = “http:<span class="comment">//www.x-force.cn/”;</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>35 添加网页加载进度窗口<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">language</span>=<span class="string">’javaScript’</span>&gt;</span><span class="undefined"></span></span><br><span class="line"><span class="javascript"><span class="keyword">var</span> placeHolder = <span class="built_in">window</span>.open(‘holder.html’,<span class="string">'placeholder’,'</span>width=<span class="number">200</span>,height=<span class="number">200</span>′);</span></span><br><span class="line"><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">title</span>&gt;</span>The Main Page<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onLoad</span>=<span class="string">’placeHolder.close()’</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">p</span>&gt;</span>This is the main page<span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>JavaScript就这么回事3：图像<br>36 读取图像属性<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”/”image1.jpg””</span> <span class="attr">name</span>=<span class="string">”myImage”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”#</span> ” <span class="attr">onClick</span>=<span class="string">”window.alert(document.myImage.width)”</span>&gt;</span>Width<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>37 动态加载图像<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">myImage = <span class="keyword">new</span> Image;</span><br><span class="line">myImage.src = “Tellers1.jpg”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>38 简单的图像替换<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line">rollImage = <span class="keyword">new</span> Image;</span><br><span class="line">rollImage.src = “rollImage1.jpg”;</span><br><span class="line">defaultImage = <span class="keyword">new</span> Image;</span><br><span class="line">defaultImage.src = “image1.jpg”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”/”myUrl””</span> <span class="attr">onMouseOver</span>=<span class="string">”document.myImage.src</span> = <span class="string">rollImage.src;”</span></span></span><br><span class="line"><span class="tag"><span class="attr">onMouseOut</span>=<span class="string">”document.myImage.src</span> = <span class="string">defaultImage.src;”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”/”image1.jpg””</span> <span class="attr">name</span>=<span class="string">”myImage”</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">height</span>=<span class="string">100</span> <span class="attr">border</span>=<span class="string">0</span>&gt;</span></span><br></pre></td></tr></table></figure><p>39 随机显示图像<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> imageList = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">imageList[<span class="number">0</span>] = “image1.jpg”;</span><br><span class="line">imageList[<span class="number">1</span>] = “image2.jpg”;</span><br><span class="line">imageList[<span class="number">2</span>] = “image3.jpg”;</span><br><span class="line">imageList[<span class="number">3</span>] = “image4.jpg”;</span><br><span class="line"><span class="keyword">var</span> imageChoice = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * imageList.length);</span><br><span class="line"><span class="built_in">document</span>.write(‘&lt;img src=”’ + imageList[imageChoice] + ‘“&gt;’);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>40 函数实现的图像替换<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> source = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">var</span> replacement = <span class="number">1</span>;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">createRollOver</span>(<span class="params">originalImage,replacementImage</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> imageArray = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">imageArray[source] = <span class="keyword">new</span> Image;</span><br><span class="line">imageArray[source].src = originalImage;</span><br><span class="line">imageArray[replacement] = <span class="keyword">new</span> Image;</span><br><span class="line">imageArray[replacement].src = replacementImage;</span><br><span class="line"><span class="keyword">return</span> imageArray;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> rollImage = createRollOver(“image1.jpg”,”rollImage1.jpg”);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”#”</span> <span class="attr">onMouseOver</span>=<span class="string">”document.myImage1.src</span> = <span class="string">rollImage1[replacement].src;”</span></span></span><br><span class="line"><span class="tag"><span class="attr">onMouseOut</span>=<span class="string">”document.myImage1.src</span> = <span class="string">rollImage1[source].src;”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”/”image1.jpg””</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">name</span>=<span class="string">”myImage1”</span> <span class="attr">border</span>=<span class="string">0</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><p>41 创建幻灯片<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> imageList = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">imageList[<span class="number">0</span>] = <span class="keyword">new</span> Image;</span><br><span class="line">imageList[<span class="number">0</span>].src = “image1.jpg”;</span><br><span class="line">imageList[<span class="number">1</span>] = <span class="keyword">new</span> Image;</span><br><span class="line">imageList[<span class="number">1</span>].src = “image2.jpg”;</span><br><span class="line">imageList[<span class="number">2</span>] = <span class="keyword">new</span> Image;</span><br><span class="line">imageList[<span class="number">2</span>].src = “image3.jpg”;</span><br><span class="line">imageList[<span class="number">3</span>] = <span class="keyword">new</span> Image;</span><br><span class="line">imageList[<span class="number">3</span>].src = “image4.jpg”;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">slideShow</span>(<span class="params">imageNumber</span>) </span>&#123;</span><br><span class="line"><span class="built_in">document</span>.slideShow.src = imageList[imageNumber].src;</span><br><span class="line">imageNumber += <span class="number">1</span>;</span><br><span class="line"><span class="keyword">if</span> (imageNumber &lt; imageList.length) &#123;</span><br><span class="line"><span class="built_in">window</span>.setTimeout(“slideShow(“ + imageNumber + “)”,<span class="number">3000</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">body</span> <span class="attr">onLoad</span>=<span class="string">”slideShow(0)”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”/”image1.jpg””</span> <span class="attr">width</span>=<span class="string">100</span> <span class="attr">name</span>=<span class="string">”slideShow”</span>&gt;</span></span><br></pre></td></tr></table></figure><p>42 随机广告图片<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> imageList = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">imageList[<span class="number">0</span>] = “image1.jpg”;</span><br><span class="line">imageList[<span class="number">1</span>] = “image2.jpg”;</span><br><span class="line">imageList[<span class="number">2</span>] = “image3.jpg”;</span><br><span class="line">imageList[<span class="number">3</span>] = “image4.jpg”;</span><br><span class="line"><span class="keyword">var</span> urlList = <span class="keyword">new</span> <span class="built_in">Array</span>;</span><br><span class="line">urlList[<span class="number">0</span>] = “http:<span class="comment">//some.host/”;</span></span><br><span class="line">urlList[<span class="number">1</span>] = “http:<span class="comment">//another.host/”;</span></span><br><span class="line">urlList[<span class="number">2</span>] = “http:<span class="comment">//somewhere.else/”;</span></span><br><span class="line">urlList[<span class="number">3</span>] = “http:<span class="comment">//right.here/”;</span></span><br><span class="line"><span class="keyword">var</span> imageChoice = <span class="built_in">Math</span>.floor(<span class="built_in">Math</span>.random() * imageList.length);</span><br><span class="line"><span class="built_in">document</span>.write(‘&lt;a href=”’ + urlList[imageChoice] + ‘“&gt;<span class="xml"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">”’</span> + <span class="attr">imageList</span>[<span class="attr">imageChoice</span>] + ‘“&gt;</span><span class="tag">&lt;/<span class="name">a</span>&gt;</span></span>’);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>JavaScript就这么回事4：表单<br>43 表单构成<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">method</span>=<span class="string">”post”</span> <span class="attr">action</span>=<span class="string">”target.html”</span> <span class="attr">name</span>=<span class="string">”thisForm”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”myText”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">”mySelect”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”1”</span>&gt;</span>First Choice<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”2”</span>&gt;</span>Second Choice<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span> <span class="attr">value</span>=<span class="string">”Submit</span> <span class="attr">Me</span>”&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>44 访问表单中的文本框内容<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”myText”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">’#’</span> <span class="attr">onClick</span>=<span class="string">’window.alert(document.myForm.myText.value);’</span>&gt;</span>Check Text Field<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>45 动态复制文本框内容<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span>&gt;</span></span><br><span class="line">Enter some Text: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”myText”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Copy Text: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”copyText”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">”#”</span> <span class="attr">onClick</span>=<span class="string">”document.myForm.copyText.value</span> =</span></span><br><span class="line"><span class="tag"><span class="attr">document.myForm.myText.value</span>;”&gt;</span>Copy Text Field<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>46 侦测文本框的变化<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span>&gt;</span></span><br><span class="line">Enter some Text: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”myText”</span> <span class="attr">onChange</span>=<span class="string">”alert(this.value);”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>47 访问选中的Select<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">”mySelect”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”First</span> <span class="attr">Choice</span>”&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”Second</span> <span class="attr">Choice</span>”&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”Third</span> <span class="attr">Choice</span>”&gt;</span>3<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">’#’</span> <span class="attr">onClick</span>=<span class="string">’alert(document.myForm.mySelect.value);’</span>&gt;</span>Check Selection List<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>48 动态增加Select项<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">select</span> <span class="attr">name</span>=<span class="string">”mySelect”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”First</span> <span class="attr">Choice</span>”&gt;</span>1<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span>=<span class="string">”Second</span> <span class="attr">Choice</span>”&gt;</span>2<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">select</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">document</span>.myForm.mySelect.length++;</span><br><span class="line"><span class="built_in">document</span>.myForm.mySelect.options[<span class="built_in">document</span>.myForm.mySelect.length - <span class="number">1</span>].text = “<span class="number">3</span>”;</span><br><span class="line"><span class="built_in">document</span>.myForm.mySelect.options[<span class="built_in">document</span>.myForm.mySelect.length - <span class="number">1</span>].value = “Third Choice”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p>49 验证表单字段<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkField</span>(<span class="params">field</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (field.value == “”) &#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“You must enter a value <span class="keyword">in</span> the field”);</span><br><span class="line">field.focus();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span> <span class="attr">action</span>=<span class="string">”target.html”</span>&gt;</span></span><br><span class="line">Text Field: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”myField”onBlur</span>=<span class="string">”checkField(this)”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”submit”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>50 验证Select项<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">checkList</span>(<span class="params">selection</span>) </span>&#123;</span><br><span class="line"><span class="keyword">if</span> (selection.length == <span class="number">0</span>) &#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“You must make a selection <span class="keyword">from</span> the list.”);</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>51 动态改变表单的action<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span> <span class="attr">action</span>=<span class="string">”login.html”</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”username”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”password”</span> <span class="attr">name</span>=<span class="string">”password”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”Login”</span> <span class="attr">onClick</span>=<span class="string">”this.form.submit();”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”Register”</span> <span class="attr">onClick</span>=<span class="string">”this.form.action</span> = <span class="string">‘register.html’;</span> <span class="attr">this.form.submit</span>();”&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”button”</span> <span class="attr">value</span>=<span class="string">”Retrieve</span> <span class="attr">Password</span>” <span class="attr">onClick</span>=<span class="string">”this.form.action</span> = <span class="string">‘password.html’;</span> <span class="attr">this.form.submit</span>();”&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>52 使用图像按钮<br>引用内容程序代码</p><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">name</span>=<span class="string">”myForm”</span> <span class="attr">action</span>=<span class="string">”login.html”</span>&gt;</span></span><br><span class="line">Username: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”text”</span> <span class="attr">name</span>=<span class="string">”username”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line">Password: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”password”name</span>=<span class="string">”password”</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">”image”</span> <span class="attr">src</span>=<span class="string">”/”login.gif””</span> <span class="attr">value</span>=<span class="string">”Login”</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure><p>53 表单数据的加密<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;SCRIPT LANGUAGE=’JavaScript’&gt;</span><br><span class="line">&lt;!–</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encrypt</span>(<span class="params">item</span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> newItem = ”;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; item.length; i++) &#123;</span><br><span class="line">newItem += item.charCodeAt(i) + ‘.’;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> newItem;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">encryptForm</span>(<span class="params">myForm</span>) </span>&#123;</span><br><span class="line"><span class="keyword">for</span> (i=<span class="number">0</span>; i &lt; myForm.elements.length; i++) &#123;</span><br><span class="line">myForm.elements[i].value = encrypt(myForm.elements[i].value);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//–&gt;</span></span><br><span class="line">&lt;<span class="regexp">/SCRIPT&gt;</span></span><br><span class="line"><span class="regexp">&lt;form name=’myForm’ onSubmit=’encryptForm(this); window.alert(this.myField.value);’&gt;</span></span><br><span class="line"><span class="regexp">Enter Some Text: &lt;input type=text name=myField&gt;&lt;input type=submit&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>form&gt;</span><br></pre></td></tr></table></figure></p><p>JavaScript就这么回事5：窗口和框架<br>54 改变浏览器状态栏文字提示<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.status = “A <span class="keyword">new</span> status message”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>55 弹出确认提示框<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> userChoice = <span class="built_in">window</span>.confirm(“Click OK or Cancel”);</span><br><span class="line"><span class="keyword">if</span> (userChoice) &#123;</span><br><span class="line"><span class="built_in">document</span>.write(“You chose OK”);</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line"><span class="built_in">document</span>.write(“You chose Cancel”);</span><br><span class="line">&#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>56 提示输入<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> userName = <span class="built_in">window</span>.prompt(“Please Enter Your Name”,”Enter Your Name Here”);</span><br><span class="line"><span class="built_in">document</span>.write(“Your Name is “ + userName);</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>57 打开一个新窗口<br>引用内容//打开一个名称为myNewWindow的浏览器新窗口<br>程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.open(“http:<span class="comment">//www.liu21st.com/”,”myNewWindow”);</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>58 设置新窗口的大小<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.open(“http:<span class="comment">//www.liu21st.com/”,”myNewWindow”,’height=300,width=300′);</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>59 设置新窗口的位置<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.open(“http:<span class="comment">//www.liu21st.com/”,”myNewWindow”,’height=300,width=300,left=200,screenX=200,top=100,screenY=100′);</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>60 是否显示工具栏和滚动栏<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.open(“http:<span class="comment">//www.x-force.cn/”,toolbar=no, menubar=no);</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>61 是否可以缩放新窗口的大小<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="built_in">window</span>.open(‘http:<span class="comment">//www.x-force.cn/’ , ‘myNewWindow’, ‘resizable=yes’ );&lt;/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>62 加载一个新的文档到当前窗口<br>引用内容程序代码<br><figure class="hljs highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">’#’</span> <span class="attr">onClick</span>=<span class="string">’document.location</span> = <span class="string">’125a.html’;’</span> &gt;</span>Open New Document<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p>63 设置页面的滚动位置<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">if</span> (<span class="built_in">document</span>.all) &#123; <span class="comment">//如果是IE浏览器则使用scrollTop属性</span></span><br><span class="line"><span class="built_in">document</span>.body.scrollTop = <span class="number">200</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123; <span class="comment">//如果是NetScape浏览器则使用pageYOffset属性</span></span><br><span class="line"><span class="built_in">window</span>.pageYOffset = <span class="number">200</span>;</span><br><span class="line">&#125;&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>64 在IE中打开全屏窗口<br>引用内容程序代码<br><figure class="hljs highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;a href=’#’ onClick=”window.open(‘http://www.devdao.com/’,'newWindow’,'fullScreen=yes’);”&gt;Open a full-screen window&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p>65 新窗口和父窗口的操作<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="comment">//定义新窗口</span></span><br><span class="line"><span class="keyword">var</span> newWindow = <span class="built_in">window</span>.open(“<span class="number">128</span>a.html”,”newWindow”);</span><br><span class="line">newWindow.close(); <span class="comment">//在父窗口中关闭打开的新窗口</span></span><br><span class="line">&lt;<span class="regexp">/script&gt;在新窗口中关闭父窗口</span></span><br></pre></td></tr></table></figure></p><p>程序代码<br><code>window.opener.close()</code><br>66 往新窗口中写内容<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> newWindow = <span class="built_in">window</span>.open(“”,”newWindow”);</span><br><span class="line">newWindow.document.open();</span><br><span class="line">newWindow.document.write(“This is a <span class="keyword">new</span> <span class="built_in">window</span>”);</span><br><span class="line">newWIndow.document.close();</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p><p>67 加载页面到框架页面<br>引用内容程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset cols=”<span class="number">50</span>%,*”&gt;</span><br><span class="line">&lt;frame name=”frame1” src=”/”<span class="number">135</span>a.html””&gt;</span><br><span class="line">&lt;frame name=”frame2” src=”/”about:blank””&gt;</span><br><span class="line">&lt;<span class="regexp">/frameset&gt;</span></span><br></pre></td></tr></table></figure></p><p>在frame1中加载frame2中的页面<br><code>parent.frame2.document.location = “135b.html”;</code><br>68 在框架页面之间共享脚本<br>引用内容如果在frame1中html文件中有个脚本<br>程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">doAlert</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="built_in">window</span>.alert(“Frame <span class="number">1</span> is loaded”);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>那么在frame2中可以如此调用该方法<br>程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onLoad=”parent.frame1.doAlert();”&gt;</span><br><span class="line">This is frame <span class="number">2.</span></span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></p><p>69 数据公用<br>引用内容可以在框架页面定义数据项，使得该数据可以被多个框架中的页面公用<br>程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;script language=”JavaScript”&gt;</span><br><span class="line"><span class="keyword">var</span> persistentVariable = “This is a persistent value”;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;frameset cols=”50%,*”&gt;</span></span><br><span class="line"><span class="regexp">&lt;frame name=”frame1” src=”/</span>”<span class="number">138</span>a.html””&gt;</span><br><span class="line">&lt;frame name=”frame2” src=”/”<span class="number">138</span>b.html””&gt;</span><br><span class="line">&lt;<span class="regexp">/frameset&gt;</span></span><br></pre></td></tr></table></figure></p><p>这样在frame1和frame2中都可以使用变量persistentVariable<br>70 框架代码库<br>引用内容根据以上的一些思路，我们可以使用一个隐藏的框架页面来作为整个框架集的代码库<br>程序代码<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;frameset cols=”<span class="number">0</span>,<span class="number">50</span>%,*”&gt;</span><br><span class="line">&lt;frame name=”codeFrame” src=”/”<span class="number">140</span>code.html””&gt;</span><br><span class="line">&lt;frame name=”frame1” src=”/”<span class="number">140</span>a.html””&gt;</span><br><span class="line">&lt;frame name=”frame2” src=”/”<span class="number">140</span>b.html””&gt;</span><br><span class="line">&lt;<span class="regexp">/frameset&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;1 创建脚本块&lt;br&gt;引用内容程序代码&lt;br&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span 
      
    
    </summary>
    
    
      <category term="基础知识" scheme="http://www.inlm.cn/tags/%E5%9F%BA%E7%A1%80%E7%9F%A5%E8%AF%86/"/>
    
  </entry>
  
  <entry>
    <title>javascript 闭包</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E9%97%AD%E5%8C%85/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-闭包/</id>
    <published>2018-10-10T17:04:33.000Z</published>
    <updated>2018-10-10T17:05:00.017Z</updated>
    
    <content type="html"><![CDATA[<p>Javascript中有几个非常重要的语言特性——对象、原型继承、闭包。其中闭包 对于那些使用传统静态语言C/C++的程序员来说是一个新的语言特性。本文将以例子入手来介绍Javascript闭包的语言特性，并结合一点 ECMAScript语言规范来使读者可以更深入的理解闭包。<br>注：本文是入门文章，例子素材整理于网络，如果你是高手，欢迎针对文章提出技术性建议和意见。本文讨论的是Javascript，不想做语言对比，如果您对Javascript天生不适，请自行绕道。<br><strong>什么是闭包</strong><br>闭包是什么?闭包是<strong>Closure</strong>，这是静态语言所不具有的一个新特性。但是闭包也不是什么复杂到不可理解的东西，简而言之，闭包就是：<br><strong>•    闭包就是函数的局部变量集合，只是这些局部变量在函数返回后会继续存在。<br>•    闭包就是就是函数的“堆栈”在函数返回后并不释放，我们也可以理解为这些函数堆栈并不在栈上分配而是在堆上分配<br>•    当在一个函数内定义另外一个函数就会产生闭包</strong><br>上面的第二定义是第一个补充说明，抽取第一个定义的主谓宾——闭包是函数的‘局部变量’集合。只是这个局部变量是可以在函数返回后被访问。（这个不是官方定义，但是这个定义应该更有利于你理解闭包）<br>做为局部变量都可以被函数内的代码访问，这个和静态语言是没有差别。闭包的差别在于局部变变量可以在函数执行结束后仍然被函数外的代码访问。这意味 着函数必须返回一个指向闭包的“引用”，或将这个”引用”赋值给某个外部变量，才能保证闭包中局部变量被外部代码访问。当然包含这个引用的实体应该是一个 对象，因为在Javascript中除了基本类型剩下的就都是对象了。可惜的是，ECMAScript并没有提供相关的成员和方法来访问闭包中的局部变 量。但是在ECMAScript中，函数对象中定义的内部函数() inner function是可以直接访问外部函数的局部变量，通过这种机制，我们就可以以如下的方式完成对闭包的访问了。<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">greeting</span>(<span class="params">name</span>) </span>&#123;</span><br><span class="line"> <span class="keyword">var</span> text = <span class="string">'Hello '</span> + name; <span class="comment">// local variable</span></span><br><span class="line">     <span class="comment">// 调用时，产生闭包，并返回内部函数对象给调用者</span></span><br><span class="line">     <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123; alert(text); &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sayHello=greeting( <span class="string">"Closure"</span> );</span><br><span class="line">sayHello()  <span class="comment">// 通过闭包访问到了局部变量text</span></span><br></pre></td></tr></table></figure></p><p>上述代码的执行结果是：Hello Closure，因为sayHello()函数在greeting函数执行完毕后，仍然可以访问到了定义在其之内的局部变量text。<br>好了，这个就是传说中闭包的效果，闭包在Javascript中有多种应用场景和模式，比如Singleton，Power Constructor等这些Javascript模式都离不开对闭包的使用。<br>ECMAScript闭包模型<br>ECMAScript到底是如何实现闭包的呢？想深入了解的亲们可以获取ECMAScript 规范进行研究，我这里也只做一个简单的讲解，内容也是来自于网络。<br>在ECMAscript的脚本的函数运行时，每个函数关联都有一个执行上下文场景(Execution Context) ，这个执行上下文场景中包含三个部分<br><strong>•    文法环境（The LexicalEnvironment）<br>•    变量环境（The VariableEnvironment）<br>•    this绑定</strong><br>其中第三点this绑定与闭包无关，不在本文中讨论。文法环境中用于解析函数执行过程使用到的变量标识符。我们可以将文法环境想象成一个对象，该对 象包含了两个重要组件，环境记录(Enviroment Recode)，和外部引用(指针)。环境记录包含包含了函数内部声明的局部变量和参数变量，外部引用指向了外部函数对象的上下文执行场景。全局的上下文 场景中此引用值为NULL。这样的数据结构就构成了一个单向的链表，每个引用都指向外层的上下文场景。<br>例如上面我们例子的闭包模型应该是这样，sayHello函数在最下层，上层是函数greeting，最外层是全局场景。如下图：</p><p>因此当sayHello被调用的时候，sayHello会通过上下文场景找到局部变量text的值，因此在屏幕的对话框中显示出”Hello Closure”<br>变量环境(The VariableEnvironment)和文法环境的作用基本相似，具体的区别请参看ECMAScript的规范文档。<br>闭包的样列<br>前面的我大致了解了Javascript闭包是什么，闭包在Javascript是怎么实现的。下面我们通过针对一些例子来帮助大家更加深入的理解闭包，下面共有5个样例，例子来自于JavaScript Closures For Dummies(镜像)。<br>例子1:闭包中局部变量是引用而非拷贝<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">say667</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"> <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">    <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">    num++;</span><br><span class="line">    <span class="keyword">return</span> sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> sayAlert = say667();</span><br><span class="line">sayAlert()</span><br></pre></td></tr></table></figure></p><p>因此执行结果应该弹出的667而非666。<br>例子2：多个函数绑定同一个闭包，因为他们定义在同一个函数内。<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">setupSomeGlobals</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">    <span class="keyword">var</span> num = <span class="number">666</span>;</span><br><span class="line">    <span class="comment">// Store some references to functions as global variables</span></span><br><span class="line">    gAlertNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(num); &#125;</span><br><span class="line">    gIncreaseNumber = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; num++; &#125;</span><br><span class="line">    gSetNumber = <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123; num = x; &#125;</span><br><span class="line">&#125;</span><br><span class="line">setupSomeGolbals(); <span class="comment">// 为三个全局变量赋值</span></span><br><span class="line">gAlertNumber(); <span class="comment">//666</span></span><br><span class="line">gIncreaseNumber();</span><br><span class="line">gAlertNumber(); <span class="comment">// 667</span></span><br><span class="line">gSetNumber(<span class="number">12</span>);<span class="comment">//</span></span><br><span class="line">gAlertNumber();<span class="comment">//12</span></span><br></pre></td></tr></table></figure></p><p>例子3：当在一个循环中赋值函数时，这些函数将绑定同样的闭包<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">buildList</span>(<span class="params">list</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> result = [];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; list.length; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> item = <span class="string">'item'</span> + list[i];</span><br><span class="line">        result.push( <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;alert(item + <span class="string">' '</span> + list[i])&#125; );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">testList</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> fnlist = buildList([<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]);</span><br><span class="line">    <span class="comment">// using j only to help prevent confusion - could use i</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> j = <span class="number">0</span>; j &lt; fnlist.length; j++) &#123;</span><br><span class="line">        fnlist[j]();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>testList的执行结果是弹出item3 undefined窗口三次，因为这三个函数绑定了同一个闭包，而且item的值为最后计算的结果，但是当i跳出循环时i值为4，所以list[4]的结果为undefined.<br>例子4：外部函数所有局部变量都在闭包内，即使这个变量声明在内部函数定义之后。<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">sayAlice</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> sayAlert = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; alert(alice); &#125;</span><br><span class="line">    <span class="comment">// Local variable that ends up within closure</span></span><br><span class="line">    <span class="keyword">var</span> alice = <span class="string">'Hello Alice'</span>;</span><br><span class="line">    <span class="keyword">return</span> sayAlert;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> helloAlice=sayAlice();</span><br><span class="line">helloAlice();</span><br></pre></td></tr></table></figure></p><p>执行结果是弹出”Hello Alice”的窗口。即使局部变量声明在函数sayAlert之后，局部变量仍然可以被访问到。<br>例子5：每次函数调用的时候创建一个新的闭包<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">newClosure</span>(<span class="params">someNum, someRef</span>) </span>&#123;</span><br><span class="line">    <span class="comment">// Local variables that end up within closure</span></span><br><span class="line">    <span class="keyword">var</span> num = someNum;</span><br><span class="line">    <span class="keyword">var</span> anArray = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>];</span><br><span class="line">    <span class="keyword">var</span> ref = someRef;</span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        num += x;</span><br><span class="line">        anArray.push(num);</span><br><span class="line">        alert(<span class="string">'num: '</span> + num +</span><br><span class="line">        <span class="string">'\nanArray '</span> + anArray.toString() +</span><br><span class="line">        <span class="string">'\nref.someVar '</span> + ref.someVar);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">closure1=newClosure(<span class="number">40</span>,&#123;<span class="attr">someVar</span>:<span class="string">'closure 1'</span>&#125;);</span><br><span class="line">closure2=newClosure(<span class="number">1000</span>,&#123;<span class="attr">someVar</span>:<span class="string">'closure 2'</span>&#125;);</span><br><span class="line">closure1(<span class="number">5</span>); <span class="comment">// num:45 anArray[1,2,3,45] ref:'someVar closure1'</span></span><br><span class="line">closure2(<span class="number">-10</span>);<span class="comment">// num:990 anArray[1,2,3,990]</span></span><br><span class="line"><span class="string">``</span><span class="string">` ref:'someVar closure2'</span></span><br><span class="line"><span class="string">闭包的应用</span></span><br><span class="line"><span class="string">Singleton 单件：</span></span><br><span class="line"><span class="string">view source</span></span><br><span class="line"><span class="string">print?</span></span><br><span class="line"><span class="string">`</span><span class="string">``</span>javascript</span><br><span class="line"><span class="keyword">var</span> singleton = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> privateVariable;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">privateFunction</span>(<span class="params">x</span>) </span>&#123;</span><br><span class="line">        ...privateVariable...</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        firstMethod: <span class="function"><span class="keyword">function</span> (<span class="params">a, b</span>) </span>&#123;</span><br><span class="line">            ...privateVariable...</span><br><span class="line">        &#125;,</span><br><span class="line">        secondMethod: <span class="function"><span class="keyword">function</span> (<span class="params">c</span>) </span>&#123;</span><br><span class="line">            ...privateFunction()...</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;();</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Javascript中有几个非常重要的语言特性——对象、原型继承、闭包。其中闭包 对于那些使用传统静态语言C/C++的程序员来说是一个新的语言特性。本文将以例子入手来介绍Javascript闭包的语言特性，并结合一点 ECMAScript语言规范来使读者可以更深入的理解闭包
      
    
    </summary>
    
    
      <category term="闭包" scheme="http://www.inlm.cn/tags/%E9%97%AD%E5%8C%85/"/>
    
  </entry>
  
  <entry>
    <title>javascript 对象学习</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-%E5%AF%B9%E8%B1%A1%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-对象学习/</id>
    <published>2018-10-10T17:03:08.000Z</published>
    <updated>2018-10-10T17:03:33.005Z</updated>
    
    <content type="html"><![CDATA[<p>构造函数内部原理（三段论）<br>1.在函数体最前面隐式的加上<code>this.{}</code><br>2.执行<code>this.xxx=xxx;</code><br>3.隐式的返回this<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name, height</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.name = name,</span><br><span class="line">        <span class="keyword">this</span>.height = height,</span><br><span class="line">        <span class="keyword">this</span>.say = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="keyword">this</span>.say);</span><br><span class="line">        &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> objs=<span class="keyword">new</span> Person(<span class="string">"王黎"</span>,<span class="number">180</span>);</span><br><span class="line"><span class="built_in">console</span>.log(objs);</span><br></pre></td></tr></table></figure></p><p><strong>包装类</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">123</span>);</span><br><span class="line"><span class="keyword">var</span> str=<span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">'abc'</span>);</span><br><span class="line"><span class="keyword">var</span> bol=<span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>原始值不能有属性和方法<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num=<span class="number">4</span>;</span><br><span class="line"><span class="comment">//new String('4').len=2; delete</span></span><br><span class="line">num.len=<span class="number">3</span>;</span><br><span class="line"><span class="built_in">console</span>.log(num.len);<span class="comment">//undefiend</span></span><br><span class="line"><span class="built_in">console</span>.log(num)<span class="comment">//4</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;构造函数内部原理（三段论）&lt;br&gt;1.在函数体最前面隐式的加上&lt;code&gt;this.{}&lt;/code&gt;&lt;br&gt;2.执行&lt;code&gt;this.xxx=xxx;&lt;/code&gt;&lt;br&gt;3.隐式的返回this&lt;br&gt;例子：&lt;br&gt;&lt;figure class=&quot;hljs highli
      
    
    </summary>
    
    
      <category term="对象" scheme="http://www.inlm.cn/tags/%E5%AF%B9%E8%B1%A1/"/>
    
  </entry>
  
  <entry>
    <title>javascript DOM增删查改系列之查找</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-DOM%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E7%B3%BB%E5%88%97%E4%B9%8B%E6%9F%A5%E6%89%BE/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-DOM增删查改系列之查找/</id>
    <published>2018-10-10T16:52:32.000Z</published>
    <updated>2018-10-10T16:58:48.799Z</updated>
    
    <content type="html"><![CDATA[<p>使用javaScript进行DOM编程，必不可少的就是对DOM元素进行操作，各种复杂的操作说到底就是简单的增、删、查、改等基本操作的相互组合。今天我们就从四种基本操作的查找操作开始。</p><p>首先根据查找的范围大致上可以分为两种，一种是直接在document上进行查找，另一种是基于某一特定的元素进行查找。</p><p>第一种：基于document进行的查找。</p><p>这一类查找又可以分为两种情况，一种是通过不同get方法传入不同的参数，从而得到相应的DOM元素或DOM元素数组。</p><p>这一类的方法主要有：</p><p>1、document.getElementById(id)。该方法通过传入元素的ID从而找到这个元素，返回的是一个DOM元素。</p><p>2、document.getElementsByClassName(className)。该方法通过传入元素的类名从而找到一系列含有该类名的元素，返回的是一个DOM元素数组。</p><p>3、document.getElementsByTagName(tagName)。该方法通过传入元素的标签名从而找到所有的标签名与参数相同的元素，返回的也是一个DOM元素数组。</p><p>4、document.getElementsByName(name)。该方法与我想象中的有所不同，传入name从而得到name名相同的元素，返回的也是一个DOM元素数组。这个name有必要说一下，这个name指的是DOM元素的一个属性，与Class类似，name属性常见于单选框，用于区分同一类按钮。或许这个方法更加合适的名字应该是getElementsByNameName()。</p><p>5、document.querySelectorAll(selector)。该方法传入的参数比较特殊，但该方法也十分人性化。你只需传入css选择器，便会得到符合这个选择器的元素。例如document.querySelectorAll(“#outder .inner”)便会获得ID名为outder元素下的所有的类名为inner的子元素。该方法返回的也是一个DOM元素数组。</p><p>6、document.querySelector(selector)。该方法与第5个方法类似，但是返回类型却不相同。该方法返回的是符合该选择器的第一个元素。也就是说该方法返回的是一个DOM元素，而不是一个元素数组。</p><p>基于document的查找的第二种情况是直接通过document的属性从而获得相应的元素。</p><p>这一类属性主要有：</p><p>1、document.forms。注意没有括号，该属性的意思是获得文档下的所有表单。</p><p>2、document.images。获得所有的图片元素。</p><p>3、document.links。获得所有的超链接，即a标签元素。</p><p>4、document.title。获得文档的标题元素。title也是一个DOM元素。</p><p>5、document.scripts。获得文档所有标签名为script的元素。</p><p>6、document.body。获得body标签元素。</p><p>第二种，基于某一特定的DOM元素进行查找。</p><p>这类方法也可以分为两种情况，一种是通过get方法，另一种同样也是通过属性的方式获得。</p><p>通过get方法的情况主要是以下几种，与document的get方法不同，基于element的get方法更加少。</p><p>1、element.getElementsByTagName(tagName)。</p><p>2、element.getElementsByClassNmae(className)。</p><p>3、element.querySelector(selector)。</p><p>4、element.querySelectorAll(selector)。</p><p>常用的只有以上两种。</p><p>另外的一种情况是通过属性获得，这类情况与document的属性相比多了很多新属性。</p><p>1、element.childNodes。 获得某一元素的所有子元素，该属性值是一个DOM元素对象数组。</p><p>2、element.firstChild。获得某一元素的第一个子元素，属性值是一个DOM元素。</p><p>3、element.lastChild。获得某一个元素的最后一个子元素，属性值是一个DOM元素。</p><p>4、element.nextSibling。获得某一元素的下一个兄弟元素。形象的说法是“弟弟元素”。</p><p>5、element.previousSibling。获得某一元素的前一个兄弟元素。形象的说法是“哥哥元素”。</p><p>6、element.parentNode。获得某一元素的父元素，该父元素是直接父元素。属性值是一个DOM元素。</p><p>至此，对DOM元素的查找的方法已经介绍完了。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;使用javaScript进行DOM编程，必不可少的就是对DOM元素进行操作，各种复杂的操作说到底就是简单的增、删、查、改等基本操作的相互组合。今天我们就从四种基本操作的查找操作开始。&lt;/p&gt;
&lt;p&gt;首先根据查找的范围大致上可以分为两种，一种是直接在document上进行查找
      
    
    </summary>
    
    
      <category term="DOM" scheme="http://www.inlm.cn/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>javascript DOM增删查改系列之删除</title>
    <link href="http://www.inlm.cn/2018/10/11/javascript-DOM%E5%A2%9E%E5%88%A0%E6%9F%A5%E6%94%B9%E7%B3%BB%E5%88%97%E4%B9%8B%E5%88%A0%E9%99%A4/"/>
    <id>http://www.inlm.cn/2018/10/11/javascript-DOM增删查改系列之删除/</id>
    <published>2018-10-10T16:48:08.000Z</published>
    <updated>2018-10-10T16:58:52.642Z</updated>
    
    <content type="html"><![CDATA[<p>突然发现，与javaScriptDom的查找方法对比一下，对DOM的删除的方法还真是少的可怜啊！我找来找去好像就只有针对DOM接点的element.removeChild(elementNode)方法和element.replaceChild(newNode,oldNode)。而针对document对象没有用于删除dom节点的方法。</p><p>自己的理解：为什么document对象没有删除dom节点的方法呢？因为document对象包含了一个HTML文档的主要结构，也就是所有的HTML文档都拥有的结构，从文档最开始的到、再到。如果对document对象创建删除节点的方法很可能会对该文档造成破坏性的影响。例如注释掉一个HTML文档的head节点用于模拟删除掉head节点，在浏览器中预览会发现诸如乱码问题的一系列问题。</p><p>接下来说element.removeChild(elementNode)方法。应该很容易理解，element是一个DOM节点，参数是他的一个子节点。具体的例子：</p><p>var element = document.body;</p><p>element.removeChild(element.childNodes[0]);</p><p>接下来说element.replaceChild(newNode,oldNode)。一直对这种方法感到很头疼，TMD记不住参数的顺序啊！！！。就当新的节点很重要，要放在前面好了。。然后是具体的例子：</p><p>var newNode = document.createElement(“div”);//该方法存在于该系列的增加篇中</p><p>var body = document.body;</p><p>body.replaceChild(newNode,body.childNodes[0]);</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;突然发现，与javaScriptDom的查找方法对比一下，对DOM的删除的方法还真是少的可怜啊！我找来找去好像就只有针对DOM接点的element.removeChild(elementNode)方法和element.replaceChild(newNode,oldNode
      
    
    </summary>
    
    
      <category term="DOM" scheme="http://www.inlm.cn/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>CSS学习</title>
    <link href="http://www.inlm.cn/2018/10/11/CSS%E5%AD%A6%E4%B9%A0/"/>
    <id>http://www.inlm.cn/2018/10/11/CSS学习/</id>
    <published>2018-10-10T16:00:24.000Z</published>
    <updated>2018-10-10T16:59:18.683Z</updated>
    
    <content type="html"><![CDATA[<h3 id="文档流"><a href="#文档流" class="headerlink" title="文档流"></a>文档流</h3><ul><li>所有的元素默认情况下都是在文档流中存在的</li><li>文档流是网页的最底层</li><li>元素在文档流中的特点：</li><li>块元素<br>1.默认宽度是父元素的全部<br>2.默认高度被内容（子元素）撑开<br>3.在页面中自上而下垂直排列</li><li>内联元素<br>1.默认高度和宽度都被内容撑开<br>2.在页面中自左向右水平排列，如果一行不足以容下所有的元素<br>则换到下一行继续从左向右</li></ul><h3 id="浮动"><a href="#浮动" class="headerlink" title="浮动"></a>浮动</h3><ul><li>使用<code>float</code>来设置元素的浮动</li><li>可选值：<br><code>none</code> 默认值，元素不浮动，就在文档流中<br><code>left</code> 元素向页面的左侧浮动<br><code>right</code> 元素向页面的右侧浮动</li><li><p>浮动特点：<br>1.元素设置浮动以后，会完全脱离文档流，并向页面的左上或右上浮动。<br>直到遇到父元素的边框或其他的父元素时则停止浮动。<br>2.如果浮动元素上边是一个没有浮动的块元素，元素不会超过该块元素。<br>3.浮动元素的浮动位置不能超过他上边浮动的兄弟元素，最多一边齐<br>4.浮动元素不会覆盖文字，文字会围绕在浮动元素的周围，所以可以通过浮动来实现文字环绕图片的效果。</p></li><li><p>浮动以后元素会完全脱离文档流，脱离文档流以后元素会具有如下特点：<br>1.块元素不独占一行<br>2.块元素的宽度和高度都被内容撑开<br>3.元素不在文档流占用位置<br>4.内联元素会变成块元素</p></li><li><p>高度塌陷</p></li><li>在文档流中元素的高度默认被子元素撑开，当子元素浮动时，子元素会脱离文档流，<br>此时将不能撑起父元素的高度，会导致父元素的高度塌陷。父元素高度塌陷会导致其他元素的位置上移，导致页面的布局混乱。</li><li>可以通过开启元素的BFC来处理高度塌陷的问题。</li><li>BFC叫做Block Formatting Context</li><li>它是一个隐含属性，默认情况是关闭，当开启以后元素会具有如下的特性：<br>1.父元素的垂直外边距不会和子元素重叠<br>2.开启BFC的元素不会被浮动元素覆盖<br>3.父元素可以包含浮动的子元素 <strong>**</strong></li><li>开启BFC的方式很多：<br>1.设置元素浮动<br>2.设置元素绝对定位<br>3.设置元素为<code>inline-block</code><br>4.将元素的overflow设置为一个非默认值</li><li>一般我们采取副作用比较小的方式<br><code>overflow:hidden</code>;</li></ul><h3 id="定位"><a href="#定位" class="headerlink" title="定位"></a>定位</h3><ul><li>通过定位可以将元素摆放到页面的任意位置</li><li>使用position来设置元素的定位</li><li>可选值：</li><li>static 默认值 元素不开启定位</li><li>relative 开启元素的相对定位</li><li>absolute 开启元素的绝对定位</li><li><p>fixed 开启元素的固定定位</p></li><li><p>相对定位<br>1.相对于元素自身在文档流中的位置进行定位<br>2.相对定位的元素不会脱离文档流，定位元素的性质不会改变，块还是块，内联还是内联<br>3.如果不设置偏移量，元素不会发生任何的变化<br>4.会提升元素的层级</p></li><li><p>绝对定位<br>1.相对于离它最近的开启了定位的祖先元素进行定位，如果祖先元素都没有开启定位则相对于浏览器窗口进行定位。<br>2.绝对定位会使元素完全脱离文档流，会改变元素的性质，内联变成块元素，块元素的宽度被内容撑开<br>3.绝对定位的元素如果不设置偏移量，元素的位置不会发生变化<br>4.会提升元素的层级</p></li><li><p>固定定位</p></li><li>固定定位也是一种绝对定位，它的大部分特点都和绝对定位是相同的。</li><li>不同的是：</li><li>固定定位永远相对于浏览器窗口进行定位</li><li><p>固定定位会固定在浏览器的指定的位置，不会随页面一起滚动</p></li><li><p>偏移量</p></li><li><p>当元素开启了定位以后，可以通过四个偏移量来设置元素的位置<br><code>top</code>：相对于定位位置的顶部的偏移量<br><code>bottom</code>：相对于定位位置的底部的偏移量<br><code>left</code>：相对于定位位置的左侧的偏移量<br><code>right</code>：相对于定位位置的右侧的偏移量</p></li><li><p>一般只需要使用两个值即可给元素进行定位<br><code>top left</code><br><code>top right</code><br><code>bottom left</code><br><code>bottom right</code></p></li><li><p>偏移量也可以指定一个负值，如果是负值则元素会向相反的方向移动</p></li><li>层级</li><li><p>当元素开启定位以后，可以通过<code>z-index</code>来设置层级，<br>它需要一个正整数作为参数，值越大层级越高，层级越高越优先显示<br>如果层级一样，则后边的会盖住前边的，父元素永远都不会盖住子元素。</p></li><li><p>文档流 &lt; 浮动 &lt; 定位 </p></li><li><p>元素的透明<br>使用<code>opacity</code>来设置元素的透明度</p></li><li>需要一个0-1之间的值</li><li>0 表示完全透明</li><li><p>1 表示完全不透明</p><p>IE8及以下的浏览器不支持该样式，需要使用如下方式来设置<br>filter:alpha(opacity=透明度);</p></li><li>需要一个0-100之间的值</li><li>0 表示完全透明</li><li>100 表示完全不透明</li></ul><h3 id="表格"><a href="#表格" class="headerlink" title="表格"></a>表格</h3><ul><li>在网页中可以通过表格来表示一些格式化的数据</li><li>表格相关的标签</li><li><code>&lt;table&gt;</code>用来创建一个表格</li><li><code>&lt;tr&gt;</code> 表示表格中的一行</li><li><code>&lt;th&gt;</code> 表示表头中的单元格</li><li><code>&lt;td&gt;</code> 表示表格中的单元格</li><li>属性：<br><code>colspan</code> 横向的合并单元格<br><code>rowspan</code> 纵向的合并单元格</li><li><p>例子：</p><p><code>&lt;table&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;td&gt;&lt;/td&gt;</code><br><code>&lt;td&gt;&lt;/td&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;tr&gt;</code><br><code>&lt;td&gt;&lt;/td&gt;</code><br><code>&lt;td&gt;&lt;/td&gt;</code><br><code>&lt;/tr&gt;</code><br><code>&lt;/table&gt;</code></p></li></ul><p>长表格</p><ul><li><code>&lt;thead&gt;</code> 表格的头部</li><li><code>&lt;tbody&gt;</code> 表格的主体</li><li>注意：如果表格中没有写thead tbody tfoot，浏览器会自动向table中添加一个tbody<br>并且将所有的tr都放到tbody中，tr是tbody的子元素，不是table的子元素</li><li><code>&lt;tfoot&gt;</code> 表格的底部</li></ul><h3 id="表单"><a href="#表单" class="headerlink" title="表单"></a>表单</h3><ul><li>表单可以将用户的信息提交到服务器中<br><strong>form</strong></li><li>用来创建一个表单</li><li>属性：<br>action:需要一个服务器地址，提交表单时表单中的内容将会被提交到该地址</li><li>表单项</li></ul><p><strong>input</strong></p><ul><li>它可以根据不同的type属性值，生成不同的表单项<br><code>type=&quot;text&quot; 文本框 &lt;input type=&quot;text&quot; name=&quot;&quot; /&gt;</code><br><code>type=&quot;password&quot; 密码框 &lt;input type=&quot;password&quot; name=&quot;&quot; /&gt;</code><br><code>type=&quot;radio&quot; 单选按钮 &lt;input type=&quot;radio&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot; /&gt;</code><br><code>type=&quot;checkbox&quot; 多选框 &lt;input type=&quot;checkbox&quot; name=&quot;&quot; value=&quot;&quot; checked=&quot;checked&quot; /&gt;</code><br><code>type=&quot;submit&quot;  提交按钮 &lt;input type=&quot;submit&quot; value=&quot;按钮上的文字&quot; /&gt;</code><br><code>type=&quot;reset&quot;  重置按钮 &lt;input type=&quot;reset&quot; value=&quot;按钮上的文字&quot; /&gt;</code><br><code>type=&quot;button&quot; 普通按钮 &lt;input type=&quot;button&quot; value=&quot;按钮上的文字&quot; /&gt;</code></li></ul><p><strong>select</strong></p><ul><li>下拉列表<br><code>&lt;select name=&quot;&quot;&gt;</code><br><code>&lt;option value=&quot;&quot; selected=&quot;selected&quot;&gt;&lt;/option&gt;</code><br><code>&lt;option value=&quot;&quot;&gt; &lt;/option&gt;</code><br><code>&lt;option value=&quot;&quot;&gt;&lt;/option&gt;</code><br><code>&lt;/select&gt;</code></li></ul><p><strong>button</strong></p><ul><li>按钮功能input那几个按钮一样，但是它们要灵活一些<br><code>&lt;button type=&quot;submit&quot;&gt;按钮的文字&lt;/button&gt;</code><br><code>&lt;button type=&quot;reset&quot;&gt;按钮的文字&lt;/button&gt;</code><br><code>&lt;button type=&quot;button&quot;&gt;按钮的文字&lt;/button&gt;</code></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;文档流&quot;&gt;&lt;a href=&quot;#文档流&quot; class=&quot;headerlink&quot; title=&quot;文档流&quot;&gt;&lt;/a&gt;文档流&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;所有的元素默认情况下都是在文档流中存在的&lt;/li&gt;
&lt;li&gt;文档流是网页的最底层&lt;/li&gt;
&lt;li&gt;元素在文档流中的特点
      
    
    </summary>
    
      <category term="css" scheme="http://www.inlm.cn/categories/css/"/>
    
    
      <category term="css基础" scheme="http://www.inlm.cn/tags/css%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(11)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-11/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-11/</id>
    <published>2018-10-10T15:55:15.000Z</published>
    <updated>2018-10-10T17:01:42.233Z</updated>
    
    <content type="html"><![CDATA[<p>DOM对CSS的操作<br>读取和修改内联样式<br>使用style属性来操作元素的内联样式<br>读取内联样式：<br>语法：<code>元素.style.样式名</code><br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">元素.style.width</span><br><span class="line">元素.style.height</span><br></pre></td></tr></table></figure></p><p>注意：如果样式名中带有-，则需要将样式名修改为驼峰命名法<br>将<strong>-</strong>去掉，然后-后的字母改大写<br>比如：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">background-color --&gt; backgroundColor</span><br><span class="line">border-width ---&gt; borderWidth</span><br></pre></td></tr></table></figure></p><p>修改内联样式：<br>语法：<code>元素.style.样式名 = 样式值</code><br>通过style修改的样式都是内联样式，由于内联样式的优先级比较高，<br> 所以我们通过JS来修改的样式，往往会立即生效，<br> 但是如果样式中设置了!important，则内联样式将不会生效。</p><p>读取元素的当前样式<br>正常浏览器<br>使用getComputedStyle()<br>这个方法是window对象的方法，可以返回一个对象，这个对象中保存着当前元素生效样式<br>参数：<br>1.要获取样式的元素<br>2.可以传递一个伪元素，一般传null<br>例子：<br>获取元素的宽度<br>getComputedStyle(box , null)[“width”];<br>通过该方法读取到样式都是只读的不能修改<br>IE8<br>使用currentStyle<br>语法：<br>元素.currentStyle.样式名<br>例子：<br>box.currentStyle[“width”]<br>通过这个属性读取到的样式是只读的不能修改<br>其他的样式相关的属性<br>注意：以下样式都是只读的<br>clientHeight<br>元素的可见高度，指元素的内容区和内边距的高度<br>clientWidth<br>元素的可见宽度，指元素的内容区和内边距的宽度<br>offsetHeight<br>整个元素的高度，包括内容区、内边距、边框<br>offfsetWidth<br>整个元素的宽度，包括内容区、内边距、边框<br>offsetParent<br>当前元素的定位父元素<br>离他最近的开启了定位的祖先元素，如果所有的元素都没有开启定位，则返回body<br>offsetLeft<br>offsetTop<br>当前元素和定位父元素之间的偏移量<br>offsetLeft水平偏移量  offsetTop垂直偏移量<br>scrollHeight<br>scrollWidth<br>获取元素滚动区域的高度和宽度<br>scrollTop<br>scrollLeft<br>获取元素垂直和水平滚动条滚动的距离<br>判断滚动条是否滚动到底<br>垂直滚动条<br>scrollHeight - scrollTop = clientHeight<br>水平滚动<br>scrollWidth - scrollLeft = clientWidth<br>事件（Event）<br>事件对象<br>当响应函数被调用时，浏览器每次都会将一个事件对象作为实参传递进响应函数中，<br>这个事件对象中封装了当前事件的相关信息，比如：鼠标的坐标，键盘的按键，鼠标的按键，滚轮的方向。。<br>可以在响应函数中定义一个形参，来使用事件对象，但是在IE8以下浏览器中事件对象没有做完实参传递，而是作为window对象的属性保存<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line">event = event || <span class="built_in">window</span>.event;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">e</span>)</span>&#123;</span><br><span class="line">e = e || event;</span><br><span class="line">&#125;; - 事件的冒泡（Bubble）</span><br></pre></td></tr></table></figure><p>事件的冒泡指的是事件向上传导，当后代元素上的事件被触发时，将会导致其祖先元素上的同类事件也会触发。<br>事件的冒泡大部分情况下都是有益的，如果需要取消冒泡，则需要使用事件对象来取消<br>可以将事件对象的cancelBubble设置为true，即可取消冒泡<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">元素.事件 = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>)</span>&#123;</span><br><span class="line"> event = event || <span class="built_in">window</span>.event;</span><br><span class="line"> event.cancelBubble = <span class="literal">true</span>;</span><br><span class="line"> &#125;;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DOM对CSS的操作&lt;br&gt;读取和修改内联样式&lt;br&gt;使用style属性来操作元素的内联样式&lt;br&gt;读取内联样式：&lt;br&gt;语法：&lt;code&gt;元素.style.样式名&lt;/code&gt;&lt;br&gt;例子：&lt;br&gt;&lt;figure class=&quot;hljs highlight javascr
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(10)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-10/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-10/</id>
    <published>2018-10-10T15:49:01.000Z</published>
    <updated>2018-10-10T17:01:32.795Z</updated>
    
    <content type="html"><![CDATA[<p>DOM查询<br>通过具体的<strong>元素节点</strong>来查询<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.getElementsByTagName()</span><br></pre></td></tr></table></figure></p><p>通过标签名查询当前元素的<strong>指定后代元素</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.childNodes</span><br></pre></td></tr></table></figure></p><p>获取当前元素的<strong>所有子节点</strong><br>会获取到空白的文本子节点<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.children</span><br></pre></td></tr></table></figure></p><p>获取当前元素的<strong>所有子元素</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.firstChild</span><br></pre></td></tr></table></figure></p><p>获取当前元素的<strong>第一个子节点</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.lastChild</span><br></pre></td></tr></table></figure></p><p>获取当前元素的<strong>最后一个子节点</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.parentNode</span><br></pre></td></tr></table></figure></p><p>获取<strong>当前元素的父元素</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.previousSibling</span><br></pre></td></tr></table></figure></p><p>获取<strong>当前元素的前一个兄弟节点</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.nextSibling</span><br></pre></td></tr></table></figure></p><p>获取当前元素的后一个兄弟节点<code>innerHTML</code>和<code>innerText</code><br>这两个属性并没有在DOM标准定义，但是大部分浏览器都支持这两个属性<br>两个属性作用类似，都可以获取到标签内部的内容，<br>不同是innerHTML会获取到html标签，而innerText会自动去除标签<br>如果使用这两个属性来设置标签内部的内容时，没有任何区别的<br><strong>读取标签内部的文本内容</strong></p><p></p><h1>h1中的文本内容</h1><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">元素.firstChild.nodeValue</span><br></pre></td></tr></table></figure><p></p><p>document对象的其他的属性和方法<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.all</span><br></pre></td></tr></table></figure></p><p><strong>获取页面中的所有元素</strong>，<br>相当于document.getElementsByTagName(“*”);<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.documentElement</span><br></pre></td></tr></table></figure></p><p><strong>获取页面中html根元素</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.body</span><br></pre></td></tr></table></figure></p><p><strong>获取页面中的body元素</strong><br>document.getElementsByClassName()<br>根据元素的class属性值查询一组元素节点对象<br>这个方法不支持IE8及以下的浏览器<br> <figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelector()</span><br></pre></td></tr></table></figure></p><p>根据CSS选择器去页面中查询一个元素<br>如果匹配到的元素有多个，则它会返回查询到的第一个元素<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.querySelectorAll()</span><br></pre></td></tr></table></figure></p><p>根据CSS选择器去页面中查询一组元素<br>会将匹配到所有元素封装到一个数组中返回，即使只匹配到一个<br>DOM修改<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createElement()</span><br></pre></td></tr></table></figure></p><p>可以根据标签名创建一个<strong>元素节点</strong>对象<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.createTextNode()</span><br></pre></td></tr></table></figure></p><p>可以根据文本内容创建一个<strong>文本节点</strong>对象<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父节点.appendChild(子节点)</span><br></pre></td></tr></table></figure></p><p>向<strong>父节点中添加指定的子节点</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父节点.insertBefore(新节点,旧节点)</span><br></pre></td></tr></table></figure></p><p>将一个<strong>新的节点插入到旧节点的前边</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父节点.replaceChild(新节点,旧节点)</span><br></pre></td></tr></table></figure></p><p>使用一个<strong>新的节点去替换旧节点</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">父节点.removeChild(子节点)</span><br></pre></td></tr></table></figure></p><p><strong>删除指定的子节点</strong><br>推荐方式：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">子节点.parentNode.removeChild(子节点)</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;DOM查询&lt;br&gt;通过具体的&lt;strong&gt;元素节点&lt;/strong&gt;来查询&lt;br&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(9)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-9/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-9/</id>
    <published>2018-10-10T15:48:53.000Z</published>
    <updated>2018-10-10T17:01:24.466Z</updated>
    
    <content type="html"><![CDATA[<h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><p>语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">量词</span><br><span class="line">&#123;n&#125; 正好n次</span><br><span class="line">&#123;m,n&#125; m-n次</span><br><span class="line">&#123;m,&#125; 至少m次</span><br><span class="line">+ 至少<span class="number">1</span>次 &#123;<span class="number">1</span>,&#125;</span><br><span class="line">?   <span class="number">0</span>次或<span class="number">1</span>次 &#123;<span class="number">0</span>,<span class="number">1</span>&#125;</span><br><span class="line">*   <span class="number">0</span>次或多次 &#123;<span class="number">0</span>,&#125;</span><br><span class="line">转义字符</span><br><span class="line">\ 在正则表达式中使用\作为转义字符</span><br><span class="line">\. 表示.</span><br><span class="line">\\ 表示\</span><br><span class="line">. 表示任意字符</span><br><span class="line">\w</span><br><span class="line">相当于[A-z0<span class="number">-9</span>_]</span><br><span class="line">\W</span><br><span class="line">相当于[^A-z0<span class="number">-9</span>_]</span><br><span class="line">\d</span><br><span class="line">任意数字</span><br><span class="line">\D</span><br><span class="line">除了数字</span><br><span class="line">\s</span><br><span class="line">空格</span><br><span class="line">\S</span><br><span class="line">除了空格</span><br><span class="line">\b</span><br><span class="line">单词边界</span><br><span class="line">\B</span><br><span class="line">除了单词边界</span><br><span class="line">^ 表示开始</span><br><span class="line">$ 表示结束</span><br></pre></td></tr></table></figure></p><h4 id="DOM"><a href="#DOM" class="headerlink" title="DOM"></a>DOM</h4><p>Document Object Model<br>文档对象模型，通过DOM可以来任意来修改网页中各个内容<br>文档<br>文档指的是网页，一个网页就是一个文档<br>对象<br>对象指将网页中的每一个节点都转换为对象<br> 转换完对象以后，就可以以一种纯面向对象的形式来操作网页了<br>模型<br>模型用来表示节点和节点之间的关系，方便操作页面<br>节点（Node）<br>节点是构成网页的最基本的单元，网页中的每一个部分都可以称为是一个节点<br>虽然都是节点，但是节点的类型却是不同的<br>常用的节点<br>文档节点 （Document），代表整个网页<br>元素节点（Element），代表网页中的标签<br>属性节点（Attribute），代表标签中的属性<br>文本节点（Text），代表网页中的文本内容<br>DOM操作<br>DOM查询<br>在网页中浏览器已经为我们提供了document对象，<br>它代表的是整个网页，它是window对象的属性，可以在页面中直接使用。<br>document查询方法：<br>根据元素的id属性查询一个元素节点对象：<br><code>document.getElementById(&quot;id属性值&quot;);</code><br>根据元素的name属性值查询一组元素节点对象:<br><code>document.getElementsByName(&quot;name属性值&quot;);</code><br>根据标签名来查询一组元素节点对象：<br><code>document.getElementsByTagName(&quot;标签名&quot;);</code><br>元素的属性：<br>读取元素的属性：<br>语法：元素.属性名<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">ele.name</span><br><span class="line">ele.id</span><br><span class="line">ele.value</span><br><span class="line">ele.className</span><br><span class="line">修改元素的属性：</span><br><span class="line">语法：元素.属性名 = 属性值</span><br></pre></td></tr></table></figure></p><p><strong>innerHTML</strong><br>使用该属性可以获取或设置元素内部的HTML代码<br><strong>事件（Event）</strong><br>事件指的是用户和浏览器之间的交互行为。比如：点击按钮、关闭窗口、鼠标移动。。。<br>我们可以为事件来绑定回调函数来响应事件。<br>绑定事件的方式：<br>1.可以在标签的事件属性中设置相应的JS代码<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;button onclick=<span class="string">"js代码。。。"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br></pre></td></tr></table></figure></p><p>2.可以通过为对象的指定事件属性设置回调函数的形式来处理事件<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var btn = document.getElementById("btn");</span></span><br><span class="line"><span class="regexp">btn.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br></pre></td></tr></table></figure></p><p>文档的加载<br>浏览器在加载一个页面时，是按照自上向下的顺序加载的，加载一行执行一行。<br>如果将js代码编写到页面的上边，当代码执行时，页面中的DOM对象还没有加载，<br> 此时将会无法正常获取到DOM对象，导致DOM操作失败。<br>解决方式一：<br>可以将js代码编写到body的下边<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&gt;</span><br><span class="line">&lt;button id=<span class="string">"btn"</span>&gt;按钮&lt;<span class="regexp">/button&gt;</span></span><br><span class="line"><span class="regexp">&lt;script&gt;</span></span><br><span class="line"><span class="regexp">var btn = document.getElementById("btn");</span></span><br><span class="line"><span class="regexp">btn.onclick = function()&#123;</span></span><br><span class="line"><span class="regexp">&#125;;</span></span><br><span class="line"><span class="regexp">&lt;/</span>script&gt;</span><br><span class="line">&lt;<span class="regexp">/body&gt;</span></span><br></pre></td></tr></table></figure></p><p>解决方式二：<br>将js代码编写到<code>window.onload = function(){}</code>中<br><code>window.onload</code> 对应的回调函数会在整个页面加载完毕以后才执行，<br>所以可以确保代码执行时，DOM对象已经加载完毕了<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line"><span class="built_in">window</span>.onload = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> btn = <span class="built_in">document</span>.getElementById(<span class="string">"btn"</span>);</span><br><span class="line">  btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"></span><br><span class="line"> &#125;;</span><br><span class="line">&#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;正则表达式&quot;&gt;&lt;a href=&quot;#正则表达式&quot; class=&quot;headerlink&quot; title=&quot;正则表达式&quot;&gt;&lt;/a&gt;正则表达式&lt;/h4&gt;&lt;p&gt;语法：&lt;br&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;t
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(8)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-8/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-8/</id>
    <published>2018-10-10T15:48:45.000Z</published>
    <updated>2018-10-10T17:01:16.182Z</updated>
    
    <content type="html"><![CDATA[<h6 id="数组方法"><a href="#数组方法" class="headerlink" title="数组方法"></a>数组方法</h6><p><strong>reverse()</strong><br>可以用来反转一个数组，它会对原数组产生影响<br>concat()<br>可以连接两个或多个数组，它不会影响原数组，而是新数组作为返回值返回<br><strong>join()</strong><br>可以将一个数组转换为一个字符串<br>参数：<br>需要一个字符串作为参数，这个字符串将会作为连接符来连接数组中的元素<br>如果不指定连接符则默认使用,<br><strong>sort()</strong><br>可以对一个数组中的内容进行排序，默认是按照Unicode编码进行排序<br>调用以后，会直接修改原数组。<br>可以自己指定排序的规则，需要一个回调函数作为参数：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params">a,b</span>)</span>&#123;</span><br><span class="line"><span class="comment">//升序排列</span></span><br><span class="line"><span class="comment">//return a-b;</span></span><br><span class="line"><span class="comment">//降序排列</span></span><br><span class="line"><span class="keyword">return</span> b-a;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h4 id="函数"><a href="#函数" class="headerlink" title="函数"></a>函数</h4><p><strong>call()</strong><br><strong>apply()</strong><br>这两个方法都是函数对象的方法需要通过函数对象来调用<br>通过两个方法可以直接调用函数，并且可以通过第一个实参来指定函数中this<br>不同的是call是直接传递函数的实参而apply需要将实参封装到一个数组中传递<br><strong>arguments</strong><br>arguments和this类似，都是函数中的隐含的参数<br>arguments是一个类数组元素，它用来封装函数执行过程中的实参<br>所以即使不定义形参，也可以通过arguments来使用实参<br>arguments中有一个属性callee表示当前执行的函数对象</p><h4 id="this"><a href="#this" class="headerlink" title="this"></a>this</h4><p>this是函数的上下文对象，根据函数的调用方式不同会执向不同的对象<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this是调用方法的对象<br>3.以构造函数的形式调用时，this是新建的那个对象<br>4.使用call和apply调用时，this是指定的那个对象<br>5.在全局作用域中this代表window</p><h4 id="包装类"><a href="#包装类" class="headerlink" title="包装类"></a>包装类</h4><p>在JS中为我们提供了三个包装类：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>()</span><br><span class="line"><span class="built_in">Boolean</span>()</span><br><span class="line"><span class="built_in">Number</span>()</span><br></pre></td></tr></table></figure></p><p>通过这三个包装类可以创建基本数据类型的对象<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> num = <span class="keyword">new</span> <span class="built_in">Number</span>(<span class="number">2</span>);</span><br><span class="line"><span class="keyword">var</span> str = <span class="keyword">new</span> <span class="built_in">String</span>(<span class="string">"hello"</span>);</span><br><span class="line"><span class="keyword">var</span> bool = <span class="keyword">new</span> <span class="built_in">Boolean</span>(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></p><p>但是在实际应用中千万不要这么干。<br>当我们去操作一个基本数据类型的属性和方法时，<br>解析器会临时将其转换为对应的包装类，然后再去操作属性和方法，<br>操作完成以后再将这个临时对象进行销毁。</p><h4 id="字符串的相关的方法"><a href="#字符串的相关的方法" class="headerlink" title="字符串的相关的方法"></a>字符串的相关的方法</h4><p><strong>length</strong><br>获取字符串的长度<br><strong>charAt()</strong><br>根据索引获取指定的字符<br><strong>charCodeAt()</strong><br>根据索引获取指定的字符编码<br><strong>String.fromCharCode()</strong><br>根据字符编码获取字符<br><strong>indexOf()</strong><br><strong>lastIndexOf()</strong><br>从一个字符串中检索指定内容<br>需要一个字符串作为参数，这个字符串就是要检索的内容，<br>如果找到该内容，则会返回其第一次出现的索引，如果没有找到则返回-1。<br>可以指定一个第二个参数，来表示开始查找的位置<br>indexOf()是从前向后找<br>lastIndexOf()是从后向前找<br><strong>slice()</strong><br> 可以从一个字符串中截取指定的内容，并将截取到内容返回，不会影响原变量<br> 参数：<br> 第一个：截取开始的位置（包括开始）<br> 第二个：截取结束的位置（不包括结束）<br> 可以省略第二个参数，如果省略则一直截取到最后<br> 可以传负数，如果是负数则从后往前数<br> <strong>substr()</strong><br> 和slice()基本一致，不同的是它第二个参数不是索引，而是截取的数量</p><p> <strong>substring()</strong><br> 和slice()基本一致，不同的是它不能接受负值作为参数，如果设置一个负值，则会自动修正为0，<br> substring()中如果第二个参数小于第一个，自动调整位置<br><strong> toLowerCase()</strong><br> 将字符串转换为小写并返回<br><strong> toUpperCase()</strong><br> 将字符串转换为大写并返回<br><strong> split()</strong><br> 可以根据指定内容将一个字符串拆分为一个数组<br> 参数：<br> 需要一个字符串作为参数，将会根据字符串去拆分数组<br> 可以接收一个正则表达式，此时会根据正则表达式去拆分数组<br> <strong>match()</strong><br> 可以将字符串中和正则表达式匹配的内容提取出来<br> 参数：<br> 正则表达式，可以根据该正则表达式将字符串中符合要求的内容提取出来<br> 并且封装到一个数组中返回<br><strong> replace()</strong><br> 可以将字符串中指定内容替换为新的内容<br> 参数：<br> 第一个：被替换的内容，可以是一个正则表达式<br> 第二个：替换的新内容<br><strong> search()</strong><br> 可以根据正则表达式去字符串中查找指定的内容<br> 参数：<br> 正则表达式，将会根据该表达式查询内容，<br> 并且将第一个匹配到的内容的索引返回，如果没有匹配到任何内容，则返回-1。<br> 正则表达式<br> 正则用来定义一些字符串的规则，程序可以根据这些规则来判断一个字符串是否符合规则，<br> 也可以将一个字符串中符合规则的内容提取出来。<br> 创建正则表达式<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"正则"</span>,<span class="string">"匹配模式"</span>);</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/正则表达式/</span>匹配模式</span><br></pre></td></tr></table></figure></p><p> 语法：<br> 匹配模式：<br> i:忽略大小写<br> g:全局匹配模式<br> 设置匹配模式时，可以都不设置，也可以设置1个，也可以全设置，设置时没有顺序要求</p><p> 正则语法<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">| 或</span><br><span class="line">[] 或</span><br><span class="line">[^ ] 除了</span><br><span class="line">[a-z] 小写字母</span><br><span class="line">[A-Z] 大写字母</span><br><span class="line">[A-z] 任意字母</span><br><span class="line">[<span class="number">0</span><span class="number">-9</span>] 任意数字</span><br></pre></td></tr></table></figure></p><p> 方法：<br> <strong>test()</strong><br> 可以用来检查一个字符串是否符合正则表达式<br> 如果符合返回true，否则返回false<br> <strong>Date</strong><br> 日期的对象，在JS中通过Date对象来表示一个时间<br> 创建对象<br> 创建一个当前的时间对象<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>();</span><br></pre></td></tr></table></figure></p><p> 创建一个指定的时间对象<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> d = <span class="keyword">new</span> <span class="built_in">Date</span>(<span class="string">"月/日/年 时:分:秒"</span>);</span><br></pre></td></tr></table></figure></p><p> 方法:<br><code>getDate()</code><br> 当前日期对象是几日（1-31）<br><code>getDay()</code><br> 返回当前日期对象时周几（0-6）<br>  0 周日<br>  1 周一 。。。<br><code>getMonth()</code><br> 返回当前日期对象的月份（0-11）<br>  0 一月<br>  1 二月 。。。<br> <code>getFullYear()</code>从 Date 对象以四位数字返回年份。<br> <code>getHours()</code>返回 Date 对象的小时 (0 ~ 23)。<br><code>getMinutes()</code> 返回 Date 对象的分钟 (0 ~ 59)。<br> <code>getSeconds()</code> 返回 Date 对象的秒数 (0 ~ 59)。<br><code>getMilliseconds()</code> 返回 Date 对象的毫秒(0 ~ 999)。<br><code>getTime()</code><br> 返回当前日期对象的时间戳<br> 时间戳，指的是从1970年月1日 0时0分0秒，到现在时间的毫秒数<br> 计算机底层保存时间都是以时间戳的形式保存的。<br><code>Date.now()</code><br> 可以获取当前代码执行时的时间戳<br> <strong>Math</strong><br> Math属于一个工具类，它不需要我们创建对象，它里边封装了属性运算相关的常量和方法<br> 我们可以直接使用它来进行数学运算相关的操作<br> 方法：<br> <code>Math.PI</code><br> 常量，圆周率<br> <code>Math.abs()</code><br> 绝对值运算<br><code>Math.ceil()</code><br> 向上取整<br> <code>Math.floor()</code><br> 向下取整<br> <code>Math.round()</code><br> 四舍五入取整<br><code>Math.random()</code><br> 生成一个0-1之间的随机数<br> 生成一个x-y之间的随机数<br><code>Math.round(Math.random()*(y-x)+x);</code><br><code>Math.pow(x,y)</code><br> 求x的y次幂<br> <code>Math.sqrt()</code><br> 对一个数进行开方<br><code>Math.max()</code><br> 求多个数中最大值<br><code>Math.min()</code><br> 求多个数中的最小值</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;数组方法&quot;&gt;&lt;a href=&quot;#数组方法&quot; class=&quot;headerlink&quot; title=&quot;数组方法&quot;&gt;&lt;/a&gt;数组方法&lt;/h6&gt;&lt;p&gt;&lt;strong&gt;reverse()&lt;/strong&gt;&lt;br&gt;可以用来反转一个数组，它会对原数组产生影响&lt;br&gt;concat(
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(7)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-7/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-7/</id>
    <published>2018-10-10T15:48:38.000Z</published>
    <updated>2018-10-10T17:01:07.537Z</updated>
    
    <content type="html"><![CDATA[<h6 id="原型（prototype）"><a href="#原型（prototype）" class="headerlink" title="原型（prototype）"></a>原型（prototype）</h6><p>创建一个函数以后，解析器都会默认在函数中添加一个数prototype,<br>prototype属性指向的是一个对象，这个对象我们称为原型对象。<br>当函数作为构造函数使用，它所创建的对象中都会有一个隐含的属性执行该原型对象。<br>这个隐含的属性可以通过<code>对象.__proto__</code>来访问。<br>原型对象就相当于一个公共的区域，凡是通过同一个构造函数创建的对象他们通常都可以访问到相同的原型对象。<br>我们可以将对象中共有的属性和方法统一添加到原型对象中，<br>这样我们只需要添加一次，就可以使所有的对象都可以使用。<br>当我们去访问对象的一个属性或调用对象的一个方法时，它会先自身中寻找，<br>如果在自身中找到了，则直接使用。<br>如果没有找到，则去原型对象中寻找，如果找到了则使用，<br>如果没有找到，则去原型的原型中寻找，依此类推。直到找到Object的原型为止，Object的原型的原型为<code>null</code>，<br>如果依然没有找到则返回<code>undefined</code><br><strong>hasOwnProperty()</strong><br>这个方法可以用来检查对象自身中是否含有某个属性<br>语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">对象.hasOwnProperty(<span class="string">"属性名"</span>)</span><br></pre></td></tr></table></figure></p><p><strong>数组（Array）</strong><br>数组也是一个对象，是一个用来存储数据的对象<br>和<code>Object</code>类似，但是它的存储效率比普通对象要高<br>数组中保存的内容我们称为元素<br>数组使用索引（index）来操作元素<br>索引指由0开始的整数<br>数组的操作：<br>创建数组<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br><span class="line"><span class="keyword">var</span> arr = [];</span><br></pre></td></tr></table></figure></p><p><strong>向数组中添加元素</strong><br>语法:<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">数组对象[索引] = 值;</span><br><span class="line">arr[<span class="number">0</span>] = <span class="number">123</span>;</span><br><span class="line">arr[<span class="number">1</span>] = <span class="string">"hello"</span>;</span><br></pre></td></tr></table></figure></p><p><strong>创建数组时直接添加元素</strong><br>语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [元素<span class="number">1</span>,元素<span class="number">2.</span>...元素N];</span><br></pre></td></tr></table></figure></p><p> 例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="number">123</span>,<span class="string">"hello"</span>,<span class="literal">true</span>,<span class="literal">null</span>];</span><br></pre></td></tr></table></figure></p><p> 获取和修改数组的长度<br> 使用<code>length</code>属性来操作数组的长度<br> 获取长度：<br> <code>数组.length</code><br> length获取到的是数组的最大索引+1<br> 对于连续的数组，length获取到的就是数组中元素的个数<br> 修改数组的长度<br> 数组.length = 新长度<br> 如果修改后的length大于原长度，则多出的部分会空出来<br> 如果修改后的length小于原长度，则原数组中多出的元素会被删除<br> 向数组的最后添加元素<br> 数组[数组.length] = 值;</p><h4 id="数组的方法"><a href="#数组的方法" class="headerlink" title="数组的方法"></a>数组的方法</h4><p><strong>push()</strong><br>用来向数组的末尾添加一个或多个元素，并返回数组新的长度<br>语法：数组.push(元素1,元素2,元素N)<br><strong>pop()</strong><br>用来删除数组的最后一个元素，并返回被删除的元素<br><strong>unshift()</strong><br>向数组的前边添加一个或多个元素，并返回数组的新的长度<br><strong>shift()</strong><br>删除数组的前边的一个元素，并返回被删除的元素<br><strong>slice()</strong><br>可以从一个数组中截取指定的元素<br>该方法不会影响原数组，而是将截取到的内容封装为一个新的数组并返回<br>参数：<br>1.截取开始位置的索引（包括开始位置）<br>2.截取结束位置的索引（不包括结束位置）<br>第二个参数可以省略不写，如果不写则一直截取到最后<br>参数可以传递一个负值，如果是负值，则从后往前数<br><strong>splice()</strong><br>可以用来删除数组中指定元素，并使用新的元素替换<br>该方法会将删除的元素封装到新数组中返回<br>参数：<br>1.删除开始位置的索引<br>2.删除的个数<br>3.三个以后，都是替换的元素，这些元素将会插入到开始位置索引的前边<br>遍历数组<br>遍历数组就是将数组中元素都获取到<br>一般情况我们都是使用for循环来遍历数组：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span> ; i&lt;数组.length ; i++)&#123;</span><br><span class="line"><span class="comment">//数组[i]</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 使用forEach()方法来遍历数组（不兼容IE8）<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">数组.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">value , index , obj</span>)</span>&#123;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p> forEach()方法需要一个回调函数作为参数，<br> 数组中有几个元素，回调函数就会被调用几次，<br> 每次调用时，都会将遍历到的信息以实参的形式传递进来，<br> 我们可以定义形参来获取这些信息。<br> value:正在遍历的元素<br> index:正在遍历元素的索引<br> obj:被遍历对象</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;原型（prototype）&quot;&gt;&lt;a href=&quot;#原型（prototype）&quot; class=&quot;headerlink&quot; title=&quot;原型（prototype）&quot;&gt;&lt;/a&gt;原型（prototype）&lt;/h6&gt;&lt;p&gt;创建一个函数以后，解析器都会默认在函数中添加一个数p
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(6)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-6/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-6/</id>
    <published>2018-10-10T15:48:29.000Z</published>
    <updated>2018-10-10T17:00:59.256Z</updated>
    
    <content type="html"><![CDATA[<p><strong>函数</strong></p><blockquote><p>返回值，就是函数执行的结果。<br>使用return 来设置函数的返回值。<br>语法：return 值;<br>该值就会成为函数的返回值，可以通过一个变量来接收返回值<br>return后边的代码都不会执行，一旦执行到return语句时，函数将会立刻退出。<br>return后可以跟任意类型的值，可以是基本数据类型，也可以是一个对象。<br>如果return后不跟值，或者是不写return则函数默认返回undefined。<br>break、continue和return<br>break<br>退出循环<br>continue<br>跳过当次循环<br>return<br>退出函数</p></blockquote><p> 参数，函数的实参也可以是任意的数据类型。</p><p>方法（method）<br>可以将一个函数设置为一个对象的属性，<br>当一个对象的属性是一个函数时，<br>我们称这个函数是该对象的方法。<br>对象.方法名();<br>函数名();</p><p><strong>作用域</strong><br>作用域简单来说就是一个变量的作用范围。<br>在JS中作用域分成两种：<br><strong> 全局作用域</strong><br>直接在script标签中编写的代码都运行在全局作用域中<br>全局作用域在打开页面时创建，在页面关闭时销毁。<br>全局作用域中有一个全局对象window，window对象由浏览器提供，<br>可以在页面中直接使用，它代表的是整个的浏览器的窗口。<br>在全局作用域中创建的变量都会作为window对象的属性保存<br>在全局作用域中创建的函数都会作为window对象的方法保存<br>在全局作用域中创建的变量和函数可以在页面的任意位置访问。<br>在函数作用域中也可以访问到全局作用域的变量。<br>尽量不要在全局中创建变量<br><strong>函数作用域</strong><br>函数作用域是函数执行时创建的作用域，每次调用函数都会创建一个新的函数作用域。<br>函数作用域在函数执行时创建，在函数执行结束时销毁。<br>在函数作用域中创建的变量，不能在全局中访问。<br>当在函数作用域中使用一个变量时，它会先在自身作用域中寻找，<br>如果找到了则直接使用，如果没有找到则到上一级作用域中寻找，<br>如果找到了则使用，找不到则继续向上找，一直会<br><strong>变量的声明提前</strong><br>在全局作用域中，使用var关键字声明的变量会在所有的代码执行之前被声明，但是不会赋值。<br>所以我们可以在变量声明前使用变量。但是不使用var关键字声明的变量不会被声明提前。<br>在函数作用域中，也具有该特性，使用var关键字声明的变量会在函数所有的代码执行前被声明，<br>如果没有使用var关键字声明变量，则变量会变成全局变量</p><p><strong>函数的声明提前</strong><br>在全局作用域中，使用函数声明创建的函数（function fun(){}）,会在所有的代码执行之前被创建，<br>也就是我们可以在函数声明前去调用函数，但是使用函数表达式(var fun = function(){})创建的函数没有该特性<br>在函数作用域中，使用函数声明创建的函数，会在所有的函数中的代码执行之前就被创建好了。</p><p><strong>this（上下文对象）</strong><br>我们每次调用函数时，解析器都会将一个上下文对象作为隐含的参数传递进函数。<br>使用this来引用上下文对象，根据函数的调用形式不同，this的值也不同。<br>this的不同的情况：<br>1.以函数的形式调用时，this是window<br>2.以方法的形式调用时，this就是调用方法的对象<br>3.以构造函数的形式调用时，this就是新创建的对象</p><p><strong>构造函数</strong><br>构造函数是专门用来创建对象的函数<br>一个构造函数我们也可以称为一个类<br>通过一个构造函数创建的对象，我们称该对象时这个构造函数的实例<br>通过同一个构造函数创建的对象，我们称为一类对象<br>构造函数就是一个普通的函数，只是他的调用方式不同，<br>如果直接调用，它就是一个普通函数<br>如果使用new来调用，则它就是一个构造函数<br>例子：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>构造函数的执行流程</strong><br>1.创建一个新的对象<br>2.将新的对象作为函数的上下文对象（this）<br>3.执行函数中的代码<br>4.将新建的对象返回<br>instanceof 用来检查一个对象是否是一个类的实例<br>语法：对象 instanceof 构造函数<br>如果该对象时构造函数的实例，则返回true，否则返回false<br>Object是所有对象的祖先，所以任何对象和Object做instanceof都会返回true<br>枚举对象中的属性<br>for…in<br>语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> 属性名 <span class="keyword">in</span> 对象)&#123;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></p><p>for…in语句的循环体会执行多次，对象中有几个属性就会执行几次，<br>每次讲一个属性名赋值给我们定义的变量，我们可以通过它来获取对象中的属性</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;函数&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;返回值，就是函数执行的结果。&lt;br&gt;使用return 来设置函数的返回值。&lt;br&gt;语法：return 值;&lt;br&gt;该值就会成为函数的返回值，可以通过一个变量来接收返回值&lt;br&gt;return后边的
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(5)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-5/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-5/</id>
    <published>2018-10-10T15:48:22.000Z</published>
    <updated>2018-10-10T17:00:50.187Z</updated>
    
    <content type="html"><![CDATA[<p><strong>对象（Object）</strong><br> 对象是JS中的引用数据类型<br> 对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性<br> 使用typeof检查一个对象时，会返回object<br> 创建对象<br> 方式一：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br></pre></td></tr></table></figure></p><p> 方式二：<br> <figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;&#125;;</span><br></pre></td></tr></table></figure></p><p> <em>向对象中添加属性</em><br> 语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名 = 属性值;</span><br><span class="line">对象[<span class="string">"属性名"</span>] = 属性值;</span><br></pre></td></tr></table></figure></p><p> 对象的属性名没有任何要求，不需要遵守标识符的规范，<br> 但是在开发中，尽量按照标识符的要求去写。<br> 属性值也可以任意的数据类型。</p><p> <em>读取对象中的属性</em><br> 语法：<br> <figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">对象.属性名</span><br><span class="line"> 对象[<span class="string">"属性名"</span>]</span><br></pre></td></tr></table></figure></p><p> 如果读取一个对象中没有的属性，它不会报错，而是返回一个undefined</p><p><em>删除对象中的属性</em><br> 语法：<br> <figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">delete</span> 对象.属性名</span><br><span class="line"><span class="keyword">delete</span> 对象[<span class="string">"属性名"</span>]</span><br></pre></td></tr></table></figure></p><p> 使用in检查对象中是否含有指定属性<br> 语法：”属性名” in 对象<br> 如果在对象中含有该属性，则返回true<br> 如果没有则返回false</p><p> 使用对象字面量，在创建对象时直接向对象中添加属性<br> 语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> obj = &#123;</span><br><span class="line">属性名:属性值,</span><br><span class="line">属性名:属性值,</span><br><span class="line">属性名:属性值,</span><br><span class="line">属性名:属性值</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> 基本数据类型和引用数据类型<br> <strong>基本数据类型</strong><br> String Number Boolean Null Undefined<br><strong> 引用数据类型</strong><br> Object<br> 基本数据类型的数据，变量是直接保存的它的值。<br> 变量与变量之间是互相独立的，修改一个变量不会影响其他的变量。<br> 引用数据类型的数据，变量是保存的对象的引用（内存地址）。<br> 如果多个变量指向的是同一个对象，此时修改一个变量的属性，会影响其他的变量。<br> 比较两个变量时，对于基本数据类型，比较的就是值，<br> 对于引用数据类型比较的是地址，地址相同才相同</p><p><strong> 函数（Function）</strong><br> 函数也是一个对象，也具有普通对象的功能<br> 函数中可以封装一些代码，在需要的时候可以去调用函数来执行这些代码<br> 使用typeof检查一个函数时会返回function<br> 创建函数<br><strong> 函数声明</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> 函数名(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p> <strong>函数表达式</strong><br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> 函数名 = <span class="function"><span class="keyword">function</span>(<span class="params">[形参<span class="number">1</span>,形参<span class="number">2.</span>..形参N]</span>)</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p><strong> 调用函数</strong><br> 语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">函数对象([实参<span class="number">1</span>,实参<span class="number">2.</span>..实参N]);</span><br></pre></td></tr></table></figure></p><p> fun() sum() alert() Number() parseInt()<br> 当我们调用函数时，函数中封装的代码会按照编写的顺序执行<br> 形参和实参</p><blockquote><p>形参：形式参数 形参：形式参数<br> 定义函数时，可以在()中定义一个或多个形参，形参之间使用,隔开<br> 定义形参就相当于在函数内声明了对应的变量但是并不赋值，<br> 形参会在调用时才赋值。</p></blockquote><blockquote><p>实参：实际参数 实参：实际参数<br> 调用函数时，可以在()传递实参，传递的实参会赋值给对应的形参,<br> 调用函数时JS解析器不会检查实参的类型和个数，可以传递任意数据类型的值。<br> 如果实参的数量大于形参，多余实参将不会赋值，<br> 如果实参的数量小于形参，则没有对应实参的形参将会赋值undefined</p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;&lt;strong&gt;对象（Object）&lt;/strong&gt;&lt;br&gt; 对象是JS中的引用数据类型&lt;br&gt; 对象是一种复合数据类型，在对象中可以保存多个不同数据类型的属性&lt;br&gt; 使用typeof检查一个对象时，会返回object&lt;br&gt; 创建对象&lt;br&gt; 方式一：&lt;br&gt;&lt;fig
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
  <entry>
    <title>javascript学习(4)</title>
    <link href="http://www.inlm.cn/2018/10/10/javascript%E5%AD%A6%E4%B9%A0-4/"/>
    <id>http://www.inlm.cn/2018/10/10/javascript学习-4/</id>
    <published>2018-10-10T15:48:13.000Z</published>
    <updated>2018-10-10T17:00:40.065Z</updated>
    
    <content type="html"><![CDATA[<h6 id="条件分支语句"><a href="#条件分支语句" class="headerlink" title="条件分支语句"></a>条件分支语句</h6><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span>语句</span><br><span class="line">语法:</span><br><span class="line"><span class="keyword">switch</span>(条件表达式)&#123;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">case</span> 表达式:</span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line"><span class="keyword">default</span>:</span><br><span class="line">语句...</span><br><span class="line"><span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong>执行流程</strong><br>switch…case…语句在执行时，会依次将case后的表达式的值和switch后的表达式的值进行全等比较，<br> 如果比较结果为false，则继续向下比较。如果比较结果为true，则从当前case处开始向下执行代码。<br> 如果所有的case判断结果都为false，则从default处开始执行代码。</p><h6 id="循环语句"><a href="#循环语句" class="headerlink" title="循环语句"></a>循环语句</h6><p> 通过循环语句可以反复执行某些语句多次<br> <strong>while循环</strong><br> 语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(条件表达式)&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> 执行流程</strong><br> while语句在执行时，会先对条件表达式进行求值判断，<br> 如果判断结果为false，则终止循环<br> 如果判断结果为true，则执行循环体<br> 循环体执行完毕，继续对条件表达式进行求值判断，依此类推</p><p><strong> do…while循环</strong><br> 语法:<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">do</span>&#123;</span><br><span class="line">语句...</span><br><span class="line">&#125;<span class="keyword">while</span>(条件表达式)</span><br></pre></td></tr></table></figure></p><p> <strong>执行流程</strong><br> do…while在执行时，会先执行do后的循环体，然后在对条件表达式进行判断，<br> 如果判断判断结果为false，则终止循环。<br> 如果判断结果为true，则继续执行循环体，依此类推</p><p> 和while的区别：<br> while：先判断后执行<br> do…while: 先执行后判断<br> do…while可以确保循环体至少执行一次。</p><p><strong> for循环</strong><br> 语法：<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(①初始化表达式 ; ②条件表达式 ; ④更新表达式)&#123;</span><br><span class="line">③语句...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong> 执行流程</strong><br> 首先执行①初始化表达式，初始化一个变量，<br> 然后对②条件表达式进行求值判断，如果为false则终止循环<br> 如果判断结果为true，则执行③循环体<br> 循环体执行完毕，执行④更新表达式，对变量进行更新。<br> 更新表达式执行完毕重复②。</p><p> 死循环<br><figure class="hljs highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">while</span>(<span class="literal">true</span>)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span>(;;)&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h6 id=&quot;条件分支语句&quot;&gt;&lt;a href=&quot;#条件分支语句&quot; class=&quot;headerlink&quot; title=&quot;条件分支语句&quot;&gt;&lt;/a&gt;条件分支语句&lt;/h6&gt;&lt;figure class=&quot;hljs highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td 
      
    
    </summary>
    
      <category term="Javascript" scheme="http://www.inlm.cn/categories/Javascript/"/>
    
    
      <category term="JS基础" scheme="http://www.inlm.cn/tags/JS%E5%9F%BA%E7%A1%80/"/>
    
  </entry>
  
</feed>
